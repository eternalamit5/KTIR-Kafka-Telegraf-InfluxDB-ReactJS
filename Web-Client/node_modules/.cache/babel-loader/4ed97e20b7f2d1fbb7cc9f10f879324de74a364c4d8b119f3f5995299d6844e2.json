{"ast":null,"code":"function b() {\n  let r = new TextDecoder(\"utf-8\");\n  return {\n    concat(e, t) {\n      let n = new Uint8Array(e.length + t.length);\n      return n.set(e), n.set(t, e.length), n;\n    },\n    copy(e, t, n) {\n      let i = new Uint8Array(n - t);\n      return i.set(e.subarray(t, n)), i;\n    },\n    toUtf8String(e, t, n) {\n      return r.decode(e.subarray(t, n));\n    }\n  };\n}\nfunction C(r, e) {\n  let t = e != null ? e : b(),\n    n,\n    i = !1,\n    s = !1,\n    o = !1,\n    a;\n  function f(l) {\n    let c,\n      d = 0;\n    for (n ? (c = l.length === 0 ? 0 : n.length, l = t.concat(n, l)) : c = 0; c < l.length;) {\n      let g = l[c];\n      if (g === 10) {\n        if (!s) {\n          let P = c > 0 && l[c - 1] === 13 ? c - 1 : c;\n          if (i) return;\n          if (o = r.next(t.toUtf8String(l, d, P)) === !1, d = c + 1, o) break;\n        }\n      } else g === 34 && (s = !s);\n      c++;\n    }\n    if (d < l.length ? n = t.copy(l, d, l.length) : n = void 0, o) {\n      if (r.useResume) {\n        r.useResume(() => {\n          o = !1, f(new Uint8Array(0));\n        });\n        return;\n      }\n      u.error(new Error(\"Unable to pause, useResume is not configured!\")), o = !1;\n    }\n    a && (a(), a = void 0);\n  }\n  let u = {\n    next(l) {\n      if (!i) try {\n        return f(l), !o;\n      } catch (c) {\n        this.error(c);\n      }\n      return !0;\n    },\n    error(l) {\n      i || (i = !0, r.error(l));\n    },\n    complete() {\n      i || (n && r.next(t.toUtf8String(n, 0, n.length)), i = !0, r.complete());\n    }\n  };\n  return r.useCancellable && (u.useCancellable = l => {\n    r.useCancellable && r.useCancellable({\n      cancel() {\n        l.cancel(), n = void 0, u.complete();\n      },\n      isCancelled() {\n        return l.isCancelled();\n      }\n    });\n  }), r.useResume && (u.useResume = l => {\n    a = l;\n  }), u;\n}\nasync function* z(r, e) {\n  let t = e != null ? e : b(),\n    n,\n    i = !1;\n  for await (let s of r) {\n    let o,\n      a = 0;\n    for (n ? (o = n.length, s = t.concat(n, s)) : o = 0; o < s.length;) {\n      let f = s[o];\n      if (f === 10) {\n        if (!i) {\n          let u = o > 0 && s[o - 1] === 13 ? o - 1 : o;\n          yield t.toUtf8String(s, a, u), a = o + 1;\n        }\n      } else f === 34 && (i = !i);\n      o++;\n    }\n    a < s.length ? n = t.copy(s, a, s.length) : n = void 0;\n  }\n  n && (yield t.toUtf8String(n, 0, n.length));\n}\nvar x = class {\n  constructor() {\n    this._reuse = !1;\n  }\n  get reuse() {\n    return this._reuse;\n  }\n  set reuse(e) {\n    e && !this.reusedValues && (this.reusedValues = new Array(10)), this._reuse = e;\n  }\n  withReuse() {\n    return this.reuse = !0, this;\n  }\n  splitLine(e) {\n    if (e == null) return this.lastSplitLength = 0, [];\n    let t = 0,\n      n = 0,\n      i = this._reuse ? this.reusedValues : [],\n      s = 0;\n    for (let a = 0; a < e.length; a++) {\n      let f = e[a];\n      if (f === \",\") {\n        if (t % 2 === 0) {\n          let u = this.getValue(e, n, a, t);\n          this._reuse ? i[s++] = u : i.push(u), n = a + 1, t = 0;\n        }\n      } else f === '\"' && t++;\n    }\n    let o = this.getValue(e, n, e.length, t);\n    return this._reuse ? (i[s] = o, this.lastSplitLength = s + 1) : (i.push(o), this.lastSplitLength = i.length), i;\n  }\n  getValue(e, t, n, i) {\n    return t === e.length ? \"\" : i === 0 ? e.substring(t, n) : i === 2 ? e.substring(t + 1, n - 1) : e.substring(t + 1, n - 1).replace(/\"\"/gi, '\"');\n  }\n};\nvar H = r => r,\n  O = {\n    boolean: r => r === \"\" ? null : r === \"true\",\n    unsignedLong: r => r === \"\" ? null : +r,\n    long: r => r === \"\" ? null : +r,\n    double(r) {\n      switch (r) {\n        case \"\":\n          return null;\n        case \"+Inf\":\n          return Number.POSITIVE_INFINITY;\n        case \"-Inf\":\n          return Number.NEGATIVE_INFINITY;\n        default:\n          return +r;\n      }\n    },\n    string: H,\n    base64Binary: H,\n    duration: r => r === \"\" ? null : r,\n    \"dateTime:RFC3339\": r => r === \"\" ? null : r\n  },\n  L = class {\n    get(e) {\n      var n;\n      let t = e[this.index];\n      return (t === \"\" || t === void 0) && this.defaultValue && (t = this.defaultValue), ((n = O[this.dataType]) != null ? n : H)(t);\n    }\n  },\n  ee = Object.freeze({\n    label: \"\",\n    dataType: \"\",\n    group: !1,\n    defaultValue: \"\",\n    index: Number.MAX_SAFE_INTEGER,\n    get: () => {}\n  });\nfunction I() {\n  return new L();\n}\nfunction We(r) {\n  var t, n;\n  let e = new L();\n  return e.label = String(r.label), e.dataType = r.dataType, e.group = Boolean(r.group), e.defaultValue = (t = r.defaultValue) != null ? t : \"\", e.index = (n = r.index) != null ? n : 0, e;\n}\nvar Ce = [404, 408, 425, 429, 500, 502, 503, 504];\nfunction Oe(r) {\n  return Ce.includes(r);\n}\nvar y = class extends Error {\n    constructor(e) {\n      super(e), this.name = \"IllegalArgumentError\", Object.setPrototypeOf(this, y.prototype);\n    }\n  },\n  m = class extends Error {\n    constructor(t, n, i, s, o, a) {\n      super();\n      this.statusCode = t;\n      this.statusMessage = n;\n      this.body = i;\n      this.contentType = o;\n      if (Object.setPrototypeOf(this, m.prototype), a) this.message = a;else if (i) {\n        if (o != null && o.startsWith(\"application/json\")) try {\n          this.json = JSON.parse(i), this.message = this.json.message, this.code = this.json.code;\n        } catch (f) {}\n        this.message || (this.message = `${t} ${n} : ${i}`);\n      } else this.message = `${t} ${n}`;\n      this.name = \"HttpError\", this.setRetryAfter(s);\n    }\n    setRetryAfter(t) {\n      typeof t == \"string\" ? /^[0-9]+$/.test(t) ? this._retryAfter = parseInt(t) : this._retryAfter = 0 : this._retryAfter = 0;\n    }\n    canRetry() {\n      return Oe(this.statusCode);\n    }\n    retryAfter() {\n      return this._retryAfter;\n    }\n  },\n  Se = [\"ECONNRESET\", \"ENOTFOUND\", \"ESOCKETTIMEDOUT\", \"ETIMEDOUT\", \"ECONNREFUSED\", \"EHOSTUNREACH\", \"EPIPE\"];\nfunction Ne(r) {\n  if (r) {\n    if (typeof r.canRetry == \"function\") return !!r.canRetry();\n    if (r.code && Se.includes(r.code)) return !0;\n  } else return !1;\n  return !1;\n}\nfunction te(r, e) {\n  if (r) {\n    let t;\n    return typeof r.retryAfter == \"function\" ? r.retryAfter() : (t = 0, e && e > 0 ? t + Math.round(Math.random() * e) : t);\n  } else return 0;\n}\nvar U = class extends Error {\n    constructor() {\n      super(), Object.setPrototypeOf(this, U.prototype), this.name = \"RequestTimedOutError\", this.message = \"Request timed out\";\n    }\n    canRetry() {\n      return !0;\n    }\n    retryAfter() {\n      return 0;\n    }\n  },\n  w = class extends Error {\n    constructor() {\n      super(), this.name = \"AbortError\", Object.setPrototypeOf(this, w.prototype), this.message = \"Response aborted\";\n    }\n    canRetry() {\n      return !0;\n    }\n    retryAfter() {\n      return 0;\n    }\n  };\nfunction Xe() {\n  O[\"dateTime:RFC3339\"] = r => r === \"\" ? null : new Date(Date.parse(r));\n}\nfunction Ge() {\n  O[\"dateTime:RFC3339\"] = r => r === \"\" ? null : Date.parse(r);\n}\nfunction Ke() {\n  O[\"dateTime:RFC3339\"] = r => r === \"\" ? null : r;\n}\nvar W = class {\n  constructor(e) {\n    e.forEach((t, n) => t.index = n), this.columns = e;\n  }\n  column(e) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;\n    for (let n = 0; n < this.columns.length; n++) {\n      let i = this.columns[n];\n      if (i.label === e) return i;\n    }\n    if (t) throw new y(`Column ${e} not found!`);\n    return ee;\n  }\n  toObject(e) {\n    let t = {};\n    for (let n = 0; n < this.columns.length && n < e.length; n++) {\n      let i = this.columns[n];\n      t[i.label] = i.get(e);\n    }\n    return t;\n  }\n  get(e, t) {\n    return this.column(t, !1).get(e);\n  }\n};\nfunction $(r) {\n  return new W(r);\n}\nfunction k(r) {\n  let e = new x().withReuse(),\n    t,\n    n = !0,\n    i = 0,\n    s,\n    o = {\n      error(a) {\n        r.error(a);\n      },\n      next(a) {\n        if (a === \"\") n = !0, t = void 0;else {\n          let f = e.splitLine(a),\n            u = e.lastSplitLength;\n          if (n) {\n            if (!t) {\n              t = new Array(u);\n              for (let l = 0; l < u; l++) t[l] = I();\n            }\n            if (f[0].startsWith(\"#\")) {\n              if (f[0] === \"#datatype\") for (let l = 1; l < u; l++) t[l].dataType = f[l];else if (f[0] === \"#default\") for (let l = 1; l < u; l++) t[l].defaultValue = f[l];else if (f[0] === \"#group\") for (let l = 1; l < u; l++) t[l].group = f[l][0] === \"t\";\n            } else {\n              f[0] === \"\" ? (i = 1, t = t.slice(1)) : i = 0;\n              for (let l = i; l < u; l++) t[l - i].label = f[l];\n              s = $(t), n = !1;\n            }\n          } else return r.next(f.slice(i, u), s);\n        }\n        return !0;\n      },\n      complete() {\n        r.complete();\n      }\n    };\n  return r.useCancellable && (o.useCancellable = r.useCancellable.bind(r)), r.useResume && (o.useResume = r.useResume.bind(r)), o;\n}\nasync function* re(r) {\n  let e = new x().withReuse(),\n    t,\n    n = !0,\n    i = 0,\n    s;\n  for await (let o of r) if (o === \"\") n = !0, t = void 0;else {\n    let a = e.splitLine(o),\n      f = e.lastSplitLength;\n    if (n) {\n      if (!t) {\n        t = new Array(f);\n        for (let u = 0; u < f; u++) t[u] = I();\n      }\n      if (a[0].startsWith(\"#\")) {\n        if (a[0] === \"#datatype\") for (let u = 1; u < f; u++) t[u].dataType = a[u];else if (a[0] === \"#default\") for (let u = 1; u < f; u++) t[u].defaultValue = a[u];else if (a[0] === \"#group\") for (let u = 1; u < f; u++) t[u].group = a[u][0] === \"t\";\n      } else {\n        a[0] === \"\" ? (i = 1, t = t.slice(1)) : i = 0;\n        for (let u = i; u < f; u++) t[u - i].label = a[u];\n        s = $(t), n = !1;\n      }\n    } else yield {\n      values: a.slice(i, f),\n      tableMeta: s\n    };\n  }\n}\nfunction pt(r, e) {\n  let t = !1,\n    n = 0,\n    i = 0;\n  for (; i < r.length;) {\n    let s = r.charCodeAt(i);\n    if (s === 10) {\n      if (!t) {\n        let o = i > 0 && r.charCodeAt(i - 1) === 13 ? i - 1 : i;\n        e.next(r.substring(n, o)), n = i + 1;\n      }\n    } else s === 34 && (t = !t);\n    i++;\n  }\n  n < i && e.next(r.substring(n, i)), e.complete();\n}\nvar ne = (() => typeof Symbol == \"function\" && Symbol.observable || \"@@observable\")();\nvar Q = class {\n  constructor(e, t) {\n    this.isClosed = !1;\n    try {\n      t({\n        next: n => {\n          e.next(n);\n        },\n        error: n => {\n          this.isClosed = !0, e.error(n);\n        },\n        complete: () => {\n          this.isClosed = !0, e.complete();\n        },\n        useCancellable: n => {\n          this.cancellable = n;\n        }\n      });\n    } catch (n) {\n      this.isClosed = !0, e.error(n);\n    }\n  }\n  get closed() {\n    return this.isClosed;\n  }\n  unsubscribe() {\n    var e;\n    (e = this.cancellable) == null || e.cancel(), this.isClosed = !0;\n  }\n};\nfunction N() {}\nfunction ve(r) {\n  let {\n    next: e,\n    error: t,\n    complete: n\n  } = r;\n  return {\n    next: e ? e.bind(r) : N,\n    error: t ? t.bind(r) : N,\n    complete: n ? n.bind(r) : N\n  };\n}\nvar T = class {\n  constructor(e, t) {\n    this.executor = e;\n    this.decorator = t;\n  }\n  subscribe(e, t, n) {\n    let i = ve(typeof e != \"object\" || e === null ? {\n      next: e,\n      error: t,\n      complete: n\n    } : e);\n    return new Q(this.decorator(i), this.executor);\n  }\n  [ne]() {\n    return this;\n  }\n};\nSymbol.observable;\nvar Nt = {\n    timeout: 1e4\n  },\n  ie = {\n    retryJitter: 200,\n    minRetryDelay: 5e3,\n    maxRetryDelay: 125e3,\n    exponentialBase: 5,\n    randomRetry: !0\n  },\n  se = {\n    batchSize: 1e3,\n    maxBatchBytes: 5e7,\n    flushInterval: 6e4,\n    writeFailed: function () {},\n    writeSuccess: function () {},\n    writeRetrySkipped: function () {},\n    maxRetries: 5,\n    maxRetryTime: 18e4,\n    maxBufferLines: 32e3,\n    retryJitter: 200,\n    minRetryDelay: 5e3,\n    maxRetryDelay: 125e3,\n    exponentialBase: 2,\n    gzipThreshold: 1e3,\n    randomRetry: !0\n  };\nfunction j(r, e) {\n  return function (t) {\n    let n = \"\",\n      i = 0,\n      s = 0;\n    for (; s < t.length;) {\n      let o = r.indexOf(t[s]);\n      o >= 0 && (n += t.substring(i, s), n += e[o], i = s + 1), s++;\n    }\n    return i == 0 ? t : (i < t.length && (n += t.substring(i, t.length)), n);\n  };\n}\nfunction Ae(r, e) {\n  let t = j(r, e);\n  return n => '\"' + t(n) + '\"';\n}\nvar R = {\n  measurement: j(`, \n\\r\t`, [\"\\\\,\", \"\\\\ \", \"\\\\n\", \"\\\\r\", \"\\\\t\"]),\n  quoted: Ae('\"\\\\', ['\\\\\"', \"\\\\\\\\\"]),\n  tag: j(`, =\n\\r\t`, [\"\\\\,\", \"\\\\ \", \"\\\\=\", \"\\\\n\", \"\\\\r\", \"\\\\t\"])\n};\nvar fe = \"000000000\";\nfunction De(r) {\n  return !1;\n}\nDe(!0);\nvar oe = Date.now(),\n  q = 0;\nfunction J() {\n  {\n    let r = Date.now();\n    r !== oe ? (oe = r, q = 0) : q++;\n    let e = String(q);\n    return String(r) + fe.substr(0, 6 - e.length) + e;\n  }\n}\nfunction ae() {\n  return String(Date.now()) + fe.substr(0, 3);\n}\nfunction le() {\n  return String(Date.now());\n}\nfunction ue() {\n  return String(Math.floor(Date.now() / 1e3));\n}\nvar ce = {\n    s: ue,\n    ms: le,\n    us: ae,\n    ns: J,\n    seconds: ue,\n    millis: le,\n    micros: ae,\n    nanos: J\n  },\n  de = {\n    s: r => `${Math.floor(r.getTime() / 1e3)}`,\n    ms: r => `${r.getTime()}`,\n    us: r => `${r.getTime()}000`,\n    ns: r => `${r.getTime()}000000`\n  };\nfunction me(r) {\n  return r === void 0 ? J() : typeof r == \"string\" ? r.length > 0 ? r : void 0 : r instanceof Date ? `${r.getTime()}000000` : String(typeof r == \"number\" ? Math.floor(r) : r);\n}\nvar Ee = {\n    error(r, e) {\n      console.error(\"ERROR: \" + r, e || \"\");\n    },\n    warn(r, e) {\n      console.warn(\"WARN: \" + r, e || \"\");\n    }\n  },\n  B = Ee,\n  p = {\n    error(r, e) {\n      B.error(r, e);\n    },\n    warn(r, e) {\n      B.warn(r, e);\n    }\n  };\nfunction Jt(r) {\n  let e = B;\n  return B = r, e;\n}\nvar M = Symbol(\"FLUX_VALUE\"),\n  h = class {\n    constructor(e) {\n      this.fluxValue = e;\n    }\n    toString() {\n      return this.fluxValue;\n    }\n    [M]() {\n      return this.fluxValue;\n    }\n  };\nfunction Pe(r) {\n  return typeof r == \"object\" && typeof r[M] == \"function\";\n}\nfunction S(r) {\n  if (r == null) return \"\";\n  r = r.toString();\n  let e,\n    t = 0;\n  function n() {\n    e === void 0 && (e = r.substring(0, t));\n  }\n  for (; t < r.length; t++) {\n    let i = r.charAt(t);\n    switch (i) {\n      case \"\\r\":\n        n(), e += \"\\\\r\";\n        break;\n      case `\n`:\n        n(), e += \"\\\\n\";\n        break;\n      case \"\t\":\n        n(), e += \"\\\\t\";\n        break;\n      case '\"':\n      case \"\\\\\":\n        n(), e = e + \"\\\\\" + i;\n        break;\n      case \"$\":\n        if (t + 1 < r.length && r.charAt(t + 1) === \"{\") {\n          n(), t++, e += \"\\\\${\";\n          break;\n        }\n        e != null && (e += i);\n        break;\n      default:\n        e != null && (e += i);\n    }\n  }\n  return e !== void 0 ? e : r;\n}\nfunction Gt(r) {\n  return new h(`\"${S(r)}\"`);\n}\nfunction he(r) {\n  let e = Number(r);\n  if (!isFinite(e)) {\n    if (typeof r == \"number\") return `float(v: \"${e}\")`;\n    throw new Error(`not a flux float: ${r}`);\n  }\n  let t = e.toString(),\n    n = !1;\n  for (let i of t) if (!(i >= \"0\" && i <= \"9\" || i == \"-\")) {\n    if (i === \".\") {\n      n = !0;\n      continue;\n    }\n    return `float(v: \"${t}\")`;\n  }\n  return n ? t : t + \".0\";\n}\nfunction Kt(r) {\n  return new h(he(r));\n}\nfunction ye(r) {\n  let e = String(r),\n    t = e.startsWith(\"-\"),\n    n = t ? e.substring(1) : e;\n  if (n.length === 0 || n.length > 19) throw new Error(`not a flux integer: ${e}`);\n  for (let i of n) if (i < \"0\" || i > \"9\") throw new Error(`not a flux integer: ${e}`);\n  if (n.length === 19) {\n    if (t && n > \"9223372036854775808\") throw new Error(`flux integer out of bounds: ${e}`);\n    if (!t && n > \"9223372036854775807\") throw new Error(`flux integer out of bounds: ${e}`);\n  }\n  return e;\n}\nfunction Yt(r) {\n  return new h(ye(r));\n}\nfunction Fe(r) {\n  return `time(v: \"${S(r)}\")`;\n}\nfunction Zt(r) {\n  return new h(Fe(r));\n}\nfunction er(r) {\n  return new h(`duration(v: \"${S(r)}\")`);\n}\nfunction ge(r) {\n  return r instanceof RegExp ? r.toString() : new RegExp(r).toString();\n}\nfunction tr(r) {\n  return new h(ge(r));\n}\nfunction rr(r) {\n  return r === \"true\" || r === \"false\" ? new h(r) : new h((!!r).toString());\n}\nfunction pe(r) {\n  return new h(String(r));\n}\nfunction X(r) {\n  if (r === void 0) return \"\";\n  if (r === null) return \"null\";\n  if (typeof r == \"boolean\") return r.toString();\n  if (typeof r == \"string\") return `\"${S(r)}\"`;\n  if (typeof r == \"number\") return Number.isSafeInteger(r) ? ye(r) : he(r);\n  if (typeof r == \"object\") {\n    if (typeof r[M] == \"function\") return r[M]();\n    if (r instanceof Date) return r.toISOString();\n    if (r instanceof RegExp) return ge(r);\n    if (Array.isArray(r)) return `[${r.map(X).join(\",\")}]`;\n  } else if (typeof r == \"bigint\") return `${r}.0`;\n  return X(r.toString());\n}\nfunction nr(r) {\n  for (var _len = arguments.length, e = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    e[_key - 1] = arguments[_key];\n  }\n  if (r.length == 1 && e.length === 0) return pe(r[0]);\n  let t = new Array(r.length + e.length),\n    n = 0;\n  for (let i = 0; i < r.length; i++) {\n    let s = r[i];\n    if (t[n++] = s, i < e.length) {\n      let o = e[i],\n        a;\n      if (s.endsWith('\"') && i + 1 < r.length && r[i + 1].startsWith('\"')) a = S(o);else if (a = X(o), a === \"\" && !Pe(o)) throw new Error(`Unsupported parameter literal '${o}' at index: ${i}, type: ${typeof o}`);\n      t[n++] = a;\n    } else if (i < r.length - 1) throw new Error(\"Too few parameters supplied!\");\n  }\n  return pe(t.join(\"\"));\n}\nvar be = class {\n  constructor(e) {\n    this.tags = {};\n    this.fields = {};\n    e && (this.name = e);\n  }\n  measurement(e) {\n    return this.name = e, this;\n  }\n  tag(e, t) {\n    return this.tags[e] = t, this;\n  }\n  booleanField(e, t) {\n    return this.fields[e] = t ? \"T\" : \"F\", this;\n  }\n  intField(e, t) {\n    let n;\n    if (typeof t == \"number\" ? n = t : n = parseInt(String(t)), isNaN(n) || n <= -9223372036854776e3 || n >= 9223372036854776e3) throw new Error(`invalid integer value for field '${e}': '${t}'!`);\n    return this.fields[e] = `${Math.floor(n)}i`, this;\n  }\n  uintField(e, t) {\n    if (typeof t == \"number\") {\n      if (isNaN(t) || t < 0 || t > Number.MAX_SAFE_INTEGER) throw new Error(`uint value for field '${e}' out of range: ${t}`);\n      this.fields[e] = `${Math.floor(t)}u`;\n    } else {\n      let n = String(t);\n      for (let i = 0; i < n.length; i++) {\n        let s = n.charCodeAt(i);\n        if (s < 48 || s > 57) throw new Error(`uint value has an unsupported character at pos ${i}: ${t}`);\n      }\n      if (n.length > 20 || n.length === 20 && n.localeCompare(\"18446744073709551615\") > 0) throw new Error(`uint value for field '${e}' out of range: ${n}`);\n      this.fields[e] = `${n}u`;\n    }\n    return this;\n  }\n  floatField(e, t) {\n    let n;\n    if (typeof t == \"number\" ? n = t : n = parseFloat(t), !isFinite(n)) throw new Error(`invalid float value for field '${e}': ${t}`);\n    return this.fields[e] = String(n), this;\n  }\n  stringField(e, t) {\n    return t != null && (typeof t != \"string\" && (t = String(t)), this.fields[e] = R.quoted(t)), this;\n  }\n  timestamp(e) {\n    return this.time = e, this;\n  }\n  toLineProtocol(e) {\n    if (!this.name) return;\n    let t = \"\";\n    if (Object.keys(this.fields).sort().forEach(o => {\n      if (o) {\n        let a = this.fields[o];\n        t.length > 0 && (t += \",\"), t += `${R.tag(o)}=${a}`;\n      }\n    }), t.length === 0) return;\n    let n = \"\",\n      i = e && e.defaultTags ? {\n        ...e.defaultTags,\n        ...this.tags\n      } : this.tags;\n    Object.keys(i).sort().forEach(o => {\n      if (o) {\n        let a = i[o];\n        a && (n += \",\", n += `${R.tag(o)}=${R.tag(a)}`);\n      }\n    });\n    let s = this.time;\n    return e && e.convertTime ? s = e.convertTime(s) : s = me(s), `${R.measurement(this.name)}${n} ${t}${s !== void 0 ? \" \" + s : \"\"}`;\n  }\n  toString() {\n    let e = this.toLineProtocol(void 0);\n    return e || `invalid point: ${JSON.stringify(this, void 0)}`;\n  }\n};\nvar G = class {\n  constructor(e) {\n    this.options = {\n      ...ie,\n      ...e\n    }, this.success();\n  }\n  nextDelay(e, t) {\n    let n = te(e);\n    if (n && n > 0) return n + Math.round(Math.random() * this.options.retryJitter);\n    if (t && t > 0) {\n      if (this.options.randomRetry) {\n        let s = Math.max(this.options.minRetryDelay, 1),\n          o = s * this.options.exponentialBase;\n        for (let a = 1; a < t; a++) if (s = o, o = o * this.options.exponentialBase, o >= this.options.maxRetryDelay) {\n          o = this.options.maxRetryDelay;\n          break;\n        }\n        return s + Math.round(Math.random() * (o - s) + Math.random() * this.options.retryJitter);\n      }\n      let i = Math.max(this.options.minRetryDelay, 1);\n      for (let s = 1; s < t; s++) if (i = i * this.options.exponentialBase, i >= this.options.maxRetryDelay) {\n        i = this.options.maxRetryDelay;\n        break;\n      }\n      return i + Math.round(Math.random() * this.options.retryJitter);\n    } else this.currentDelay ? this.currentDelay = Math.min(Math.max(this.currentDelay * this.options.exponentialBase, 1) + Math.round(Math.random() * this.options.retryJitter), this.options.maxRetryDelay) : this.currentDelay = this.options.minRetryDelay + Math.round(Math.random() * this.options.retryJitter);\n    return this.currentDelay;\n  }\n  success() {\n    this.currentDelay = void 0;\n  }\n};\nfunction xe(r) {\n  return new G(r);\n}\nfunction Le(r) {\n  let e,\n    t = r,\n    n = r;\n  for (; n.next;) n.next.expires < t.expires && (e = n, t = n.next), n = n.next;\n  return [t, e];\n}\nvar v = class {\n  constructor(e, t) {\n    let n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};\n    this.maxLines = e;\n    this.retryLines = t;\n    this.onShrink = n;\n    this.size = 0;\n    this.closed = !1;\n    this._timeoutHandle = void 0;\n  }\n  addLines(e, t, n, i) {\n    if (this.closed || !e.length) return;\n    let s = Date.now() + n;\n    if (i < s && (s = i), this.first && this.size + e.length > this.maxLines) {\n      let u = this.size,\n        l = u * .7;\n      do {\n        let [c, d] = Le(this.first);\n        this.size -= c.lines.length, d ? d.next = c.next : (this.first = c.next, this.first && this.scheduleRetry(this.first.retryTime - Date.now())), c.next = void 0, this.onShrink(c);\n      } while (this.first && this.size + e.length > l);\n      p.error(`RetryBuffer: ${u - this.size} oldest lines removed to keep buffer size under the limit of ${this.maxLines} lines.`);\n    }\n    let o = {\n        lines: e,\n        retryCount: t,\n        retryTime: s,\n        expires: i\n      },\n      a = this.first,\n      f;\n    for (;;) {\n      if (!a || a.retryTime > s) {\n        o.next = a, f ? f.next = o : (this.first = o, this.scheduleRetry(s - Date.now()));\n        break;\n      }\n      f = a, a = a.next;\n    }\n    this.size += e.length;\n  }\n  removeLines() {\n    if (this.first) {\n      let e = this.first;\n      return this.first = this.first.next, e.next = void 0, this.size -= e.lines.length, e;\n    }\n  }\n  scheduleRetry(e) {\n    this._timeoutHandle && clearTimeout(this._timeoutHandle), this._timeoutHandle = setTimeout(() => {\n      let t = this.removeLines();\n      t ? this.retryLines(t.lines, t.retryCount, t.expires).catch(() => {}).finally(() => {\n        this.first && this.scheduleRetry(this.first.retryTime - Date.now());\n      }) : this._timeoutHandle = void 0;\n    }, Math.max(e, 0));\n  }\n  async flush() {\n    let e;\n    for (; e = this.removeLines();) await this.retryLines(e.lines, e.retryCount, e.expires);\n  }\n  close() {\n    return this._timeoutHandle && (clearTimeout(this._timeoutHandle), this._timeoutHandle = void 0), this.closed = !0, this.size;\n  }\n};\nfunction K(r) {\n  let e = r.length;\n  for (let t = 0; t < r.length; t++) {\n    let n = r.charCodeAt(t);\n    n < 128 || (n >= 128 && n <= 2047 ? e++ : n >= 2048 && n <= 65535 ? n >= 55296 && n <= 57343 ? e++ : e += 2 : e += 3);\n  }\n  return e;\n}\nvar Y = class {\n    constructor(e, t, n, i) {\n      this.maxChunkRecords = e;\n      this.maxBatchBytes = t;\n      this.flushFn = n;\n      this.scheduleSend = i;\n      this.length = 0;\n      this.bytes = -1;\n      this.lines = new Array(e);\n    }\n    add(e) {\n      let t = K(e);\n      this.length === 0 ? this.scheduleSend() : this.bytes + t + 1 >= this.maxBatchBytes && this.flush().catch(n => {}), this.lines[this.length] = e, this.length++, this.bytes += t + 1, (this.length >= this.maxChunkRecords || this.bytes >= this.maxBatchBytes) && this.flush().catch(n => {});\n    }\n    flush() {\n      let e = this.reset();\n      return e.length > 0 ? this.flushFn(e) : Promise.resolve();\n    }\n    reset() {\n      let e = this.lines.slice(0, this.length);\n      return this.length = 0, this.bytes = -1, e;\n    }\n  },\n  A = class {\n    constructor(e, t, n, i, s) {\n      this.transport = e;\n      this.closed = !1;\n      this._timeoutHandle = void 0;\n      this.path = `/api/v2/write?org=${encodeURIComponent(t)}&bucket=${encodeURIComponent(n)}&precision=${i}`, s != null && s.consistency && (this.path += `&consistency=${encodeURIComponent(s.consistency)}`), this.writeOptions = {\n        ...se,\n        ...s\n      }, this.currentTime = ce[i], this.dateToProtocolTimestamp = de[i], this.writeOptions.defaultTags && this.useDefaultTags(this.writeOptions.defaultTags), this.sendOptions = {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"text/plain; charset=utf-8\",\n          ...(s == null ? void 0 : s.headers)\n        },\n        gzipThreshold: this.writeOptions.gzipThreshold\n      };\n      let o = () => {\n        this.writeOptions.flushInterval > 0 && (this._clearFlushTimeout(), this.closed || (this._timeoutHandle = setTimeout(() => this.sendBatch(this.writeBuffer.reset(), this.writeOptions.maxRetries).catch(a => {}), this.writeOptions.flushInterval)));\n      };\n      this.writeBuffer = new Y(this.writeOptions.batchSize, this.writeOptions.maxBatchBytes, a => (this._clearFlushTimeout(), this.sendBatch(a, this.writeOptions.maxRetries)), o), this.sendBatch = this.sendBatch.bind(this), this.retryStrategy = xe(this.writeOptions), this.retryBuffer = new v(this.writeOptions.maxBufferLines, this.sendBatch, this.writeOptions.writeRetrySkipped);\n    }\n    sendBatch(e, t) {\n      let n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Date.now() + this.writeOptions.maxRetryTime;\n      let i = this,\n        s = i.writeOptions.maxRetries + 1 - t;\n      if (!this.closed && e.length > 0) {\n        if (n <= Date.now()) {\n          let o = new Error(\"Max retry time exceeded.\"),\n            a = i.writeOptions.writeFailed.call(i, o, e, s, n);\n          return a || (p.error(`Write to InfluxDB failed (attempt: ${s}).`, o), Promise.reject(o));\n        }\n        return new Promise((o, a) => {\n          let f,\n            u = {\n              responseStarted(l, c) {\n                f = c;\n              },\n              error(l) {\n                let c = i.writeOptions.writeFailed.call(i, l, e, s, n);\n                if (c) {\n                  c.then(o, a);\n                  return;\n                }\n                if (l instanceof m && l.json && typeof l.json.error == \"string\" && l.json.error.includes(\"hinted handoff queue not empty\")) {\n                  p.warn(\"Write to InfluxDB returns: \" + l.json.error), f = 204, u.complete();\n                  return;\n                }\n                if (!i.closed && t > 0 && (!(l instanceof m) || l.statusCode >= 429)) {\n                  p.warn(`Write to InfluxDB failed (attempt: ${s}).`, l), i.retryBuffer.addLines(e, t - 1, i.retryStrategy.nextDelay(l, s), n), a(l);\n                  return;\n                }\n                p.error(\"Write to InfluxDB failed.\", l), a(l);\n              },\n              complete() {\n                if (f == 204 || f == null) i.writeOptions.writeSuccess.call(i, e), i.retryStrategy.success(), o();else {\n                  let l = `204 HTTP response status code expected, but ${f} returned`,\n                    c = new m(f, l, void 0, \"0\");\n                  c.message = l, u.error(c);\n                }\n              }\n            };\n          this.transport.send(this.path, e.join(`\n`), this.sendOptions, u);\n        });\n      } else return Promise.resolve();\n    }\n    _clearFlushTimeout() {\n      this._timeoutHandle !== void 0 && (clearTimeout(this._timeoutHandle), this._timeoutHandle = void 0);\n    }\n    writeRecord(e) {\n      if (this.closed) throw new Error(\"writeApi: already closed!\");\n      this.writeBuffer.add(e);\n    }\n    writeRecords(e) {\n      if (this.closed) throw new Error(\"writeApi: already closed!\");\n      for (let t = 0; t < e.length; t++) this.writeBuffer.add(e[t]);\n    }\n    writePoint(e) {\n      if (this.closed) throw new Error(\"writeApi: already closed!\");\n      let t = e.toLineProtocol(this);\n      t && this.writeBuffer.add(t);\n    }\n    writePoints(e) {\n      if (this.closed) throw new Error(\"writeApi: already closed!\");\n      for (let t = 0; t < e.length; t++) {\n        let n = e[t].toLineProtocol(this);\n        n && this.writeBuffer.add(n);\n      }\n    }\n    async flush(e) {\n      if (await this.writeBuffer.flush(), e) return await this.retryBuffer.flush();\n    }\n    close() {\n      return this.writeBuffer.flush().finally(() => {\n        let t = this.retryBuffer.close();\n        t && p.error(`Retry buffer closed with ${t} items that were not written to InfluxDB!`, null), this.closed = !0;\n      });\n    }\n    dispose() {\n      return this._clearFlushTimeout(), this.closed = !0, this.retryBuffer.close() + this.writeBuffer.length;\n    }\n    useDefaultTags(e) {\n      return this.defaultTags = e, this;\n    }\n    convertTime(e) {\n      return e === void 0 ? this.currentTime() : typeof e == \"string\" ? e.length > 0 ? e : void 0 : e instanceof Date ? this.dateToProtocolTimestamp(e) : String(typeof e == \"number\" ? Math.floor(e) : e);\n    }\n  };\nfunction Z() {\n  let r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let e = 0,\n    t = {\n      next: n => {\n        if (e === 0 && r.next && n !== null && n !== void 0) return r.next(n);\n      },\n      error: n => {\n        e === 0 && (e = 1, r.error && r.error(n));\n      },\n      complete: () => {\n        e === 0 && (e = 2, r.complete && r.complete());\n      },\n      responseStarted: (n, i) => {\n        r.responseStarted && r.responseStarted(n, i);\n      }\n    };\n  return r.useCancellable && (t.useCancellable = r.useCancellable.bind(r)), r.useResume && (t.useResume = r.useResume.bind(r)), t;\n}\nfunction we(r) {\n  let e = {};\n  return r.headers.forEach((t, n) => {\n    let i = e[n];\n    i === void 0 ? e[n] = t : Array.isArray(i) ? i.push(t) : e[n] = [i, t];\n  }), e;\n}\nvar D = class {\n  constructor(e) {\n    this.connectionOptions = e;\n    this.chunkCombiner = b();\n    this.requestDecorator = function () {};\n    this.defaultHeaders = {\n      \"content-type\": \"application/json; charset=utf-8\",\n      ...e.headers\n    }, this.connectionOptions.token && (this.defaultHeaders.Authorization = \"Token \" + this.connectionOptions.token), this.url = String(this.connectionOptions.url), this.url.endsWith(\"/\") && (this.url = this.url.substring(0, this.url.length - 1)), this.url.endsWith(\"/api/v2\") && (this.url = this.url.substring(0, this.url.length - 7), p.warn(`Please remove '/api/v2' context path from InfluxDB base url, using ${this.url} !`));\n  }\n  send(e, t, n, i) {\n    let s = Z(i),\n      o = !1,\n      a = n.signal,\n      f,\n      u = () => {},\n      l = u;\n    if (i && i.useCancellable) {\n      let c = new AbortController();\n      a || (a = c.signal, n = {\n        ...n,\n        signal: a\n      }), a.addEventListener(\"abort\", () => {\n        l();\n      }), i.useCancellable({\n        cancel() {\n          o = !0, c.abort();\n        },\n        isCancelled() {\n          return o || a.aborted;\n        }\n      });\n    }\n    this.fetch(e, t, n).then(async c => {\n      if (i != null && i.responseStarted && s.responseStarted(we(c), c.status), await this.throwOnErrorResponse(c), c.body) {\n        let d = c.body.getReader(),\n          g;\n        do {\n          if (f && (await f), o) break;\n          if (g = await d.read(), s.next(g.value) === !1) {\n            let P = s.useResume;\n            if (!P) {\n              let F = \"Unable to pause, useResume is not configured!\";\n              return await d.cancel(F), Promise.reject(new Error(F));\n            }\n            f = new Promise(F => {\n              l = () => {\n                F(), f = void 0, l = u;\n              }, P(l);\n            });\n          }\n        } while (!g.done);\n      } else if (c.arrayBuffer) {\n        let d = await c.arrayBuffer();\n        s.next(new Uint8Array(d));\n      } else {\n        let d = await c.text();\n        s.next(new TextEncoder().encode(d));\n      }\n    }).catch(c => {\n      o || s.error(c);\n    }).finally(() => s.complete());\n  }\n  async throwOnErrorResponse(e) {\n    if (e.status >= 300) {\n      let t = \"\";\n      try {\n        if (t = await e.text(), !t) {\n          let n = e.headers.get(\"x-influxdb-error\");\n          n && (t = n);\n        }\n      } catch (n) {\n        throw p.warn(\"Unable to receive error body\", n), new m(e.status, e.statusText, void 0, e.headers.get(\"retry-after\"), e.headers.get(\"content-type\"));\n      }\n      throw new m(e.status, e.statusText, t, e.headers.get(\"retry-after\"), e.headers.get(\"content-type\"));\n    }\n  }\n  async *iterate(e, t, n) {\n    var s;\n    let i = await this.fetch(e, t, n);\n    if (await this.throwOnErrorResponse(i), i.body) {\n      let o = i.body.getReader();\n      for (;;) {\n        let {\n          value: a,\n          done: f\n        } = await o.read();\n        if (f) break;\n        if ((s = n.signal) != null && s.aborted) throw await i.body.cancel(), new w();\n        yield a;\n      }\n    } else if (i.arrayBuffer) {\n      let o = await i.arrayBuffer();\n      yield new Uint8Array(o);\n    } else {\n      let o = await i.text();\n      yield new TextEncoder().encode(o);\n    }\n  }\n  async request(e, t, n, i) {\n    var u, l;\n    let s = await this.fetch(e, t, n),\n      {\n        headers: o\n      } = s,\n      a = o.get(\"content-type\") || \"\";\n    i && i(we(s), s.status), await this.throwOnErrorResponse(s);\n    let f = (l = (u = n.headers) == null ? void 0 : u.accept) != null ? l : a;\n    if (f.includes(\"json\")) return await s.json();\n    if (f.includes(\"text\") || f.startsWith(\"application/csv\")) return await s.text();\n  }\n  fetch(e, t, n) {\n    let {\n        method: i,\n        headers: s,\n        ...o\n      } = n,\n      a = `${this.url}${e}`,\n      f = {\n        method: i,\n        body: i === \"GET\" || i === \"HEAD\" ? void 0 : typeof t == \"string\" ? t : JSON.stringify(t),\n        headers: {\n          ...this.defaultHeaders,\n          ...s\n        },\n        credentials: \"omit\",\n        ...this.connectionOptions.transportOptions,\n        ...o\n      };\n    return this.requestDecorator(f, n, a), fetch(a, f);\n  }\n};\nvar Te = {\n    header: !0,\n    delimiter: \",\",\n    quoteChar: '\"',\n    commentPrefix: \"#\",\n    annotations: [\"datatype\", \"group\", \"default\"]\n  },\n  E = class {\n    constructor(e, t, n) {\n      this.transport = e;\n      this.createCSVResponse = t;\n      this.options = typeof n == \"string\" ? {\n        org: n\n      } : n;\n    }\n    with(e) {\n      return new E(this.transport, this.createCSVResponse, {\n        ...this.options,\n        ...e\n      });\n    }\n    response(e) {\n      let {\n          org: t,\n          type: n,\n          gzip: i,\n          headers: s\n        } = this.options,\n        o = `/api/v2/query?org=${encodeURIComponent(t)}`,\n        a = JSON.stringify(this.decorateRequest({\n          query: e.toString(),\n          dialect: Te,\n          type: n\n        })),\n        f = {\n          method: \"POST\",\n          headers: {\n            \"content-type\": \"application/json; encoding=utf-8\",\n            \"accept-encoding\": i ? \"gzip\" : \"identity\",\n            ...s\n          }\n        };\n      return this.createCSVResponse(u => this.transport.send(o, a, f, u), () => this.transport.iterate(o, a, f));\n    }\n    iterateLines(e) {\n      return this.response(e).iterateLines();\n    }\n    iterateRows(e) {\n      return this.response(e).iterateRows();\n    }\n    lines(e) {\n      return this.response(e).lines();\n    }\n    rows(e) {\n      return this.response(e).rows();\n    }\n    queryLines(e, t) {\n      return this.response(e).consumeLines(t);\n    }\n    queryRows(e, t) {\n      return this.response(e).consumeRows(t);\n    }\n    collectRows(e, t) {\n      return this.response(e).collectRows(t);\n    }\n    collectLines(e) {\n      return this.response(e).collectLines();\n    }\n    queryRaw(e) {\n      let {\n        org: t,\n        type: n,\n        gzip: i,\n        headers: s\n      } = this.options;\n      return this.transport.request(`/api/v2/query?org=${encodeURIComponent(t)}`, JSON.stringify(this.decorateRequest({\n        query: e.toString(),\n        dialect: Te,\n        type: n\n      })), {\n        method: \"POST\",\n        headers: {\n          accept: \"text/csv\",\n          \"accept-encoding\": i ? \"gzip\" : \"identity\",\n          \"content-type\": \"application/json; encoding=utf-8\",\n          ...s\n        }\n      });\n    }\n    decorateRequest(e) {\n      var t;\n      return typeof this.options.now == \"function\" && (e.now = this.options.now()), e.type = (t = this.options.type) != null ? t : \"flux\", e;\n    }\n  },\n  Re = E;\nfunction Ie(r, e) {\n  return e.toObject(r);\n}\nvar _ = class {\n  constructor(e, t, n) {\n    this.executor = e;\n    this.iterableResultExecutor = t;\n    this.chunkCombiner = n;\n  }\n  iterateLines() {\n    return z(this.iterableResultExecutor());\n  }\n  iterateRows() {\n    return re(z(this.iterableResultExecutor()));\n  }\n  lines() {\n    return new T(this.executor, e => C(e, this.chunkCombiner));\n  }\n  rows() {\n    return new T(this.executor, e => C(k({\n      next(t, n) {\n        e.next({\n          values: t,\n          tableMeta: n\n        });\n      },\n      error(t) {\n        e.error(t);\n      },\n      complete() {\n        e.complete();\n      }\n    }), this.chunkCombiner));\n  }\n  consumeLines(e) {\n    this.executor(C(e, this.chunkCombiner));\n  }\n  consumeRows(e) {\n    this.executor(C(k(e), this.chunkCombiner));\n  }\n  collectRows() {\n    let e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Ie;\n    let t = [];\n    return new Promise((n, i) => {\n      this.consumeRows({\n        next(s, o) {\n          let a = e.call(this, s, o);\n          a !== void 0 && t.push(a);\n        },\n        error(s) {\n          i(s);\n        },\n        complete() {\n          n(t);\n        }\n      });\n    });\n  }\n  collectLines() {\n    let e = [];\n    return new Promise((t, n) => {\n      this.consumeLines({\n        next(i) {\n          e.push(i);\n        },\n        error(i) {\n          n(i);\n        },\n        complete() {\n          t(e);\n        }\n      });\n    });\n  }\n};\nvar V = class {\n  constructor(e) {\n    var n;\n    if (typeof e == \"string\") this._options = {\n      url: e\n    };else if (e !== null && typeof e == \"object\") this._options = e;else throw new y(\"No url or configuration specified!\");\n    let t = this._options.url;\n    if (typeof t != \"string\") throw new y(\"No url specified!\");\n    t.endsWith(\"/\") && (this._options.url = t.substring(0, t.length - 1)), this.transport = (n = this._options.transport) != null ? n : new D(this._options), this.processCSVResponse = (i, s) => new _(i, s, this.transport.chunkCombiner);\n  }\n  getWriteApi(e, t) {\n    let n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"ns\";\n    let i = arguments.length > 3 ? arguments[3] : undefined;\n    return new A(this.transport, e, t, n, i != null ? i : this._options.writeOptions);\n  }\n  getQueryApi(e) {\n    return new Re(this.transport, this.processCSVResponse, e);\n  }\n};\nexport { w as AbortError, Nt as DEFAULT_ConnectionOptions, ie as DEFAULT_RetryDelayStrategyOptions, se as DEFAULT_WriteOptions, M as FLUX_VALUE, m as HttpError, y as IllegalArgumentError, V as InfluxDB, x as LineSplitter, p as Log, be as Point, U as RequestTimedOutError, ee as UNKNOWN_COLUMN, Ne as canRetryHttpCall, C as chunksToLines, z as chunksToLinesIterable, Ee as consoleLogger, me as convertTimeToNanos, We as createFluxTableColumn, $ as createFluxTableMetaData, b as createTextDecoderCombiner, ce as currentTime, de as dateToProtocolTimestamp, R as escape, nr as flux, rr as fluxBool, Zt as fluxDateTime, er as fluxDuration, pe as fluxExpression, Kt as fluxFloat, Yt as fluxInteger, tr as fluxRegExp, Gt as fluxString, te as getRetryDelay, Oe as isStatusCodeRetriable, re as linesToRowsIterable, k as linesToTables, I as newFluxTableColumn, he as sanitizeFloat, ye as sanitizeInteger, Xe as serializeDateTimeAsDate, Ge as serializeDateTimeAsNumber, Ke as serializeDateTimeAsString, Jt as setLogger, pt as stringToLines, ne as symbolObservable, X as toFluxValue, O as typeSerializers, De as useProcessHrtime };","map":{"version":3,"names":["b","r","TextDecoder","concat","e","t","n","Uint8Array","length","set","copy","i","subarray","toUtf8String","decode","C","s","o","a","f","l","c","d","g","P","next","useResume","u","error","Error","complete","useCancellable","cancel","isCancelled","z","x","constructor","_reuse","reuse","reusedValues","Array","withReuse","splitLine","lastSplitLength","getValue","push","substring","replace","H","O","boolean","unsignedLong","long","double","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","string","base64Binary","duration","L","get","index","defaultValue","dataType","ee","Object","freeze","label","group","MAX_SAFE_INTEGER","I","We","String","Boolean","Ce","Oe","includes","y","name","setPrototypeOf","prototype","m","statusCode","statusMessage","body","contentType","message","startsWith","json","JSON","parse","code","setRetryAfter","test","_retryAfter","parseInt","canRetry","retryAfter","Se","Ne","te","Math","round","random","U","w","Xe","Date","Ge","Ke","W","forEach","columns","column","arguments","undefined","toObject","$","k","slice","bind","re","values","tableMeta","pt","charCodeAt","ne","Symbol","observable","Q","isClosed","cancellable","closed","unsubscribe","N","ve","T","executor","decorator","subscribe","Nt","timeout","ie","retryJitter","minRetryDelay","maxRetryDelay","exponentialBase","randomRetry","se","batchSize","maxBatchBytes","flushInterval","writeFailed","writeSuccess","writeRetrySkipped","maxRetries","maxRetryTime","maxBufferLines","gzipThreshold","j","indexOf","Ae","R","measurement","quoted","tag","fe","De","oe","now","q","J","substr","ae","le","ue","floor","ce","ms","us","ns","seconds","millis","micros","nanos","de","getTime","me","Ee","console","warn","B","p","Jt","M","h","fluxValue","toString","Pe","S","charAt","Gt","he","isFinite","Kt","ye","Yt","Fe","Zt","er","ge","RegExp","tr","rr","pe","X","isSafeInteger","toISOString","isArray","map","join","nr","_len","_key","endsWith","be","tags","fields","booleanField","intField","isNaN","uintField","localeCompare","floatField","parseFloat","stringField","timestamp","time","toLineProtocol","keys","sort","defaultTags","convertTime","stringify","G","options","success","nextDelay","max","currentDelay","min","xe","Le","expires","v","maxLines","retryLines","onShrink","size","_timeoutHandle","addLines","first","lines","scheduleRetry","retryTime","retryCount","removeLines","clearTimeout","setTimeout","catch","finally","flush","close","K","Y","maxChunkRecords","flushFn","scheduleSend","bytes","add","reset","Promise","resolve","A","transport","path","encodeURIComponent","consistency","writeOptions","currentTime","dateToProtocolTimestamp","useDefaultTags","sendOptions","method","headers","scheduleNextSend","_clearFlushTimeout","sendBatch","writeBuffer","retryStrategy","retryBuffer","call","reject","responseStarted","then","send","writeRecord","writeRecords","writePoint","writePoints","dispose","Z","we","D","connectionOptions","chunkCombiner","requestDecorator","defaultHeaders","token","Authorization","url","signal","resumeQuickly","AbortController","addEventListener","abort","aborted","fetch","status","throwOnErrorResponse","getReader","read","value","F","resume","done","arrayBuffer","text","TextEncoder","encode","statusText","iterate","request","accept","credentials","transportOptions","Te","header","delimiter","quoteChar","commentPrefix","annotations","E","createCSVResponse","org","with","response","type","gzip","decorateRequest","query","dialect","iterateLines","iterateRows","rows","queryLines","consumeLines","queryRows","consumeRows","collectRows","collectLines","queryRaw","Re","Ie","_","iterableResultExecutor","V","_options","processCSVResponse","getWriteApi","getQueryApi","AbortError","DEFAULT_ConnectionOptions","DEFAULT_RetryDelayStrategyOptions","DEFAULT_WriteOptions","FLUX_VALUE","HttpError","IllegalArgumentError","InfluxDB","LineSplitter","Log","Point","RequestTimedOutError","UNKNOWN_COLUMN","canRetryHttpCall","chunksToLines","chunksToLinesIterable","consoleLogger","convertTimeToNanos","createFluxTableColumn","createFluxTableMetaData","createTextDecoderCombiner","escape","flux","fluxBool","fluxDateTime","fluxDuration","fluxExpression","fluxFloat","fluxInteger","fluxRegExp","fluxString","getRetryDelay","isStatusCodeRetriable","linesToRowsIterable","linesToTables","newFluxTableColumn","sanitizeFloat","sanitizeInteger","serializeDateTimeAsDate","serializeDateTimeAsNumber","serializeDateTimeAsString","setLogger","stringToLines","symbolObservable","toFluxValue","typeSerializers","useProcessHrtime"],"sources":["/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/results/chunkCombiner.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/results/chunksToLines.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/results/chunksToLinesIterable.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/results/LineSplitter.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/results/FluxTableColumn.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/errors.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/results/FluxTableMetaData.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/results/linesToTables.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/results/linesToRowsIterable.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/results/stringToLines.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/observable/symbol.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/results/ObservableQuery.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/options.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/util/escape.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/util/currentTime.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/util/logger.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/query/flux.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/Point.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/impl/retryStrategy.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/impl/RetryBuffer.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/util/utf8Length.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/impl/WriteApiImpl.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/impl/completeCommunicationObserver.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/impl/browser/FetchTransport.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/impl/QueryApiImpl.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/results/AnnotatedCSVResponseImpl.ts","/home/lcl_asingh/Projects/Myprojects/line-chart-app/node_modules/@influxdata/influxdb-client/src/InfluxDB.ts"],"sourcesContent":["/**\n * ChunkCombiner is a simplified platform-neutral manipulation of Uint8arrays\n * that allows to process text data on the fly. The implementation can be optimized\n * for the target platform (node vs browser).\n */\nexport interface ChunkCombiner {\n  /**\n   * Concatenates first and second chunk.\n   * @param first - first chunk\n   * @param second - second chunk\n   * @returns first + second\n   */\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array\n\n  /**\n   * Converts chunk into a string.\n   * @param chunk - chunk\n   * @param start - start index\n   * @param end - end index\n   * @returns string representation of chunk slice\n   */\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string\n\n  /**\n   * Creates a new chunk from the supplied chunk.\n   * @param chunk - chunk to copy\n   * @param start - start index\n   * @param end - end index\n   * @returns a copy of a chunk slice\n   */\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array\n}\n\n// TextDecoder is available since node v8.3.0 and in all modern browsers\ndeclare class TextDecoder {\n  constructor(encoding: string)\n  decode(chunk: Uint8Array): string\n}\n\n/**\n * Creates a chunk combiner instance that uses UTF-8\n * TextDecoder to decode Uint8Arrays into strings.\n */\nexport function createTextDecoderCombiner(): ChunkCombiner {\n  const decoder = new TextDecoder('utf-8')\n  return {\n    concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n      const retVal = new Uint8Array(first.length + second.length)\n      retVal.set(first)\n      retVal.set(second, first.length)\n      return retVal\n    },\n    copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n      const retVal = new Uint8Array(end - start)\n      retVal.set(chunk.subarray(start, end))\n      return retVal\n    },\n    toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n      return decoder.decode(chunk.subarray(start, end))\n    },\n  }\n}\n","import {ChunkCombiner, createTextDecoderCombiner} from './chunkCombiner'\nimport {CommunicationObserver} from './CommunicationObserver'\nimport {Cancellable} from './Cancellable'\n\n/**\n * ChunksToLines is a transformation that accepts Uint8Array instances\n * and emmits strings representing CSV lines.\n * @param target - target to emmit CSV lines to\n * @param chunkCombiner - chunk combiner\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function chunksToLines(\n  target: CommunicationObserver<string>,\n  chunkCombiner?: ChunkCombiner\n): CommunicationObserver<Uint8Array> {\n  const chunks = chunkCombiner ?? createTextDecoderCombiner()\n  let previous: Uint8Array | undefined\n  let finished = false\n  let quoted = false\n  let paused = false\n  let resumeChunks: (() => void) | undefined\n\n  function bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (previous) {\n      // inspect the whole remaining data upon empty chunk\n      // empty chunk signalizes to restart of receiving\n      index = chunk.length === 0 ? 0 : (previous as Uint8Array).length\n      chunk = chunks.concat(previous, chunk)\n    } else {\n      index = 0\n    }\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          // do not emmit more lines if the processing is already finished\n          if (finished) {\n            return\n          }\n          paused = target.next(chunks.toUtf8String(chunk, start, end)) === false\n          start = index + 1\n          if (paused) {\n            break\n          }\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < chunk.length) {\n      previous = chunks.copy(chunk, start, chunk.length)\n    } else {\n      previous = undefined\n    }\n    if (paused) {\n      if (target.useResume) {\n        target.useResume(() => {\n          paused = false\n          bufferReceived(new Uint8Array(0))\n        })\n        return\n      }\n      retVal.error(new Error('Unable to pause, useResume is not configured!'))\n      paused = false // consume remaining data\n    }\n    if (resumeChunks) {\n      resumeChunks()\n      resumeChunks = undefined\n    }\n  }\n\n  const retVal: CommunicationObserver<Uint8Array> = {\n    next(chunk: Uint8Array): boolean {\n      if (!finished) {\n        try {\n          bufferReceived(chunk)\n          return !paused\n        } catch (e) {\n          this.error(e as Error)\n        }\n      }\n      return true\n    },\n    error(error: Error): void {\n      if (!finished) {\n        finished = true\n        target.error(error)\n      }\n    },\n    complete(): void {\n      if (!finished) {\n        if (previous) {\n          target.next(chunks.toUtf8String(previous, 0, previous.length))\n        }\n        finished = true\n        target.complete()\n      }\n    },\n  }\n  if (target.useCancellable) {\n    retVal.useCancellable = (cancellable: Cancellable) => {\n      target.useCancellable &&\n        target.useCancellable({\n          cancel(): void {\n            cancellable.cancel()\n            previous = undefined // do not emit more lines\n            retVal.complete()\n          },\n          isCancelled(): boolean {\n            return cancellable.isCancelled()\n          },\n        })\n    }\n  }\n  if (target.useResume) {\n    retVal.useResume = (x: () => void) => {\n      resumeChunks = x\n    }\n  }\n\n  return retVal\n}\n","import {ChunkCombiner, createTextDecoderCombiner} from './chunkCombiner'\n\n/**\n * ChunksToLinesIterable is a transformation that accepts\n * an iterable of Uint8Array instances and returns iterable of lines.\n * @param source - iterable of transport buffers\n * @param chunkCombiner - chunk combiner\n * @returns iterable of lines\n */\nexport async function* chunksToLinesIterable(\n  source: AsyncIterable<Uint8Array>,\n  chunkCombiner?: ChunkCombiner\n): AsyncIterableIterator<string> {\n  const chunks = chunkCombiner ?? createTextDecoderCombiner()\n  let previous: Uint8Array | undefined\n  let quoted = false\n\n  for await (let chunk of source) {\n    let index: number\n    let start = 0\n    if (previous) {\n      index = previous.length\n      chunk = chunks.concat(previous, chunk)\n    } else {\n      index = 0\n    }\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          yield chunks.toUtf8String(chunk, start, end)\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < chunk.length) {\n      previous = chunks.copy(chunk, start, chunk.length)\n    } else {\n      previous = undefined\n    }\n  }\n  if (previous) {\n    yield chunks.toUtf8String(previous, 0, previous.length)\n  }\n}\n","/**\n * Optimized tokenizer of a single CSV line.\n */\nexport class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line - line\n   * @returns array of splitted parts\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === ',') {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === '\"') {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","/**\n * Type of query result column, see {@link https://docs.influxdata.com/influxdb/latest/reference/syntax/annotated-csv/#data-types }\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime:RFC3339'\n  | 'duration'\n  | string\n\n/**\n * FluxTableColumn describes {@link http://bit.ly/flux-spec#table | flux table} column.\n */\nexport interface FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is an empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in a row array.\n   */\n  index: number\n\n  /**\n   * Get returns a JavaScript object of this column in the supplied result row, using default deserializers.\n   * @param row - a data row\n   * @returns column value\n   */\n  get: (row: string[]) => any\n}\n\nconst identity = (x: string): any => x\n\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See {@link https://docs.influxdata.com/influxdb/latest/reference/syntax/annotated-csv/#data-types }\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => (x === '' ? null : x === 'true'),\n  unsignedLong: (x: string): any => (x === '' ? null : +x),\n  long: (x: string): any => (x === '' ? null : +x),\n  double(x: string): any {\n    switch (x) {\n      case '':\n        return null\n      case '+Inf':\n        return Number.POSITIVE_INFINITY\n      case '-Inf':\n        return Number.NEGATIVE_INFINITY\n      default:\n        return +x\n    }\n  },\n  string: identity,\n  base64Binary: identity,\n  duration: (x: string): any => (x === '' ? null : x),\n  'dateTime:RFC3339': (x: string): any => (x === '' ? null : x),\n}\n\n/**\n * FluxTableColumn implementation.\n */\nclass FluxTableColumnImpl implements FluxTableColumn {\n  label: string\n  dataType: ColumnType\n  group: boolean\n  defaultValue: string\n  index: number\n  public get(row: string[]): any {\n    let val = row[this.index]\n    if ((val === '' || val === undefined) && this.defaultValue) {\n      val = this.defaultValue\n    }\n    return (typeSerializers[this.dataType] ?? identity)(val)\n  }\n}\nexport const UNKNOWN_COLUMN: FluxTableColumn = Object.freeze({\n  label: '',\n  dataType: '',\n  group: false,\n  defaultValue: '',\n  index: Number.MAX_SAFE_INTEGER,\n  get: () => undefined,\n})\n\n/**\n * Creates a new flux table column.\n * @returns column instance\n */\nexport function newFluxTableColumn(): FluxTableColumn {\n  return new FluxTableColumnImpl()\n}\n\n/**\n * Creates a flux table column from a partial FluxTableColumn.\n * @param object - source object\n * @returns column instance\n */\nexport function createFluxTableColumn(\n  object: Partial<FluxTableColumn>\n): FluxTableColumn {\n  const retVal = new FluxTableColumnImpl()\n  retVal.label = String(object.label)\n  retVal.dataType = object.dataType as ColumnType\n  retVal.group = Boolean(object.group)\n  retVal.defaultValue = object.defaultValue ?? ''\n  retVal.index = object.index ?? 0\n  return retVal\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error - reason for retrying\n   * @param failedAttempts - a count of already failed attempts, 1 being the first\n   * @returns milliseconds to wait before retrying\n   */\n  nextDelay(error?: Error, failedAttempts?: number): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @returns 0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\n/** isStatusCodeRetriable checks whether the supplied HTTP status code is retriable. */\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\n/** IllegalArgumentError is thrown when illegal argument is supplied. */\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    this.name = 'IllegalArgumentError'\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n  /** application error code, when available */\n  public code: string | undefined\n  /** json error response */\n  public json: any\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null,\n    readonly contentType?: string | undefined | null,\n    message?: string\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (message) {\n      this.message = message\n    } else if (body) {\n      if (contentType?.startsWith('application/json')) {\n        try {\n          this.json = JSON.parse(body)\n          this.message = this.json.message\n          this.code = this.json.code\n        } catch (e) {\n          // silently ignore, body string is still available\n        }\n      }\n      if (!this.message) {\n        this.message = `${statusCode} ${statusMessage} : ${body}`\n      }\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.name = 'HttpError'\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error in order to know if an HTTP call can be retried.\n * @param error - error to test\n * @returns true for a retriable error\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\n/** RequestTimedOutError indicates request timeout in the communication with the server */\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.name = 'RequestTimedOutError'\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\n/** AbortError indicates that the communication with the server was aborted */\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","import {\n  FluxTableColumn,\n  UNKNOWN_COLUMN,\n  typeSerializers,\n} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\n/**\n * serializeDateTimeAsDate changes type serializers to return JavaScript Date instances\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsDate(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : new Date(Date.parse(x))\n}\n/**\n * serializeDateTimeAsNumber changes type serializers to return milliseconds since epoch\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsNumber(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : Date.parse(x)\n}\n/**\n * serializeDateTimeAsString changes type serializers to return string values\n * for `dateTime:RFC3339` query result data type.  Empty value is converted to null.\n */\nexport function serializeDateTimeAsString(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : x\n}\n\n/**\n * Represents metadata of a {@link http://bit.ly/flux-spec#table | flux table}.\n */\nexport interface FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n\n  /**\n   * Gets columns by name\n   * @param label - column label\n   * @param errorOnMissingColumn - throw error on missing column (by default), return UNKNOWN_COLUMN when false\n   * @returns table column\n   * @throws IllegalArgumentError if column is not found\n   **/\n  column(label: string, errorOnMissingColumn?: boolean): FluxTableColumn\n\n  /**\n   * Creates an object out of the supplied row with the help of column descriptors.\n   * @param row - a row with data for each column\n   */\n  toObject(row: string[]): {[key: string]: any}\n\n  /**\n   * Gets column values out of the supplied row.\n   * @param row - a row with data for each column\n   * @param column - column name\n   * @returns column value, undefined for unknown column\n   */\n  get(row: string[], column: string): any\n}\n\n/**\n * FluxTableMetaData Implementation.\n */\nclass FluxTableMetaDataImpl implements FluxTableMetaData {\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  column(label: string, errorOnMissingColumn = true): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    if (errorOnMissingColumn) {\n      throw new IllegalArgumentError(`Column ${label} not found!`)\n    }\n    return UNKNOWN_COLUMN\n  }\n  toObject(row: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < row.length; i++) {\n      const column = this.columns[i]\n      acc[column.label] = column.get(row)\n    }\n    return acc\n  }\n  get(row: string[], column: string): any {\n    return this.column(column, false).get(row)\n  }\n}\n\n/**\n * Created FluxTableMetaData from the columns supplied.\n * @param columns -  columns\n * @returns - instance\n */\nexport function createFluxTableMetaData(\n  columns: FluxTableColumn[]\n): FluxTableMetaData {\n  return new FluxTableMetaDataImpl(columns)\n}\n\n/** Wraps values and associated metadata of a query result row */\nexport interface Row {\n  values: string[]\n  tableMeta: FluxTableMetaData\n}\n","import {CommunicationObserver} from './CommunicationObserver'\nimport {LineSplitter} from './LineSplitter'\nimport {FluxResultObserver} from './FluxResultObserver'\nimport {\n  FluxTableColumn,\n  ColumnType,\n  newFluxTableColumn,\n} from './FluxTableColumn'\nimport {FluxTableMetaData, createFluxTableMetaData} from './FluxTableMetaData'\n\n/**\n * LinesToTables creates a transformation that accepts (flux) annotated CSV lines\n * and emits rows together with table metadata.\n */\nexport function linesToTables(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  const retVal: CommunicationObserver<string> = {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void | boolean {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = newFluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = createFluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          return consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n      return true\n    },\n    complete(): void {\n      consumer.complete()\n    },\n  }\n  if (consumer.useCancellable) {\n    retVal.useCancellable = consumer.useCancellable.bind(consumer)\n  }\n  if (consumer.useResume) {\n    retVal.useResume = consumer.useResume.bind(consumer)\n  }\n  return retVal\n}\n","import {LineSplitter} from './LineSplitter'\nimport {\n  FluxTableColumn,\n  ColumnType,\n  newFluxTableColumn,\n} from './FluxTableColumn'\nimport {\n  FluxTableMetaData,\n  createFluxTableMetaData,\n  Row,\n} from './FluxTableMetaData'\n\n/**\n * LinesToRowsIterable is a transformation that accepts\n * an iterable of flux annotated CSV lines and returns\n * an iterable of rows (row values and table metadata).\n */\nexport async function* linesToRowsIterable(\n  source: AsyncIterable<string>\n): AsyncIterableIterator<Row> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData | undefined = undefined\n  for await (const line of source) {\n    if (line === '') {\n      expectMeta = true\n      columns = undefined\n    } else {\n      const values = splitter.splitLine(line)\n      const size = splitter.lastSplitLength\n      if (expectMeta) {\n        // create columns\n        if (!columns) {\n          columns = new Array(size)\n          for (let i = 0; i < size; i++) {\n            columns[i] = newFluxTableColumn()\n          }\n        }\n        if (!values[0].startsWith('#')) {\n          // fill in column names\n          if (values[0] === '') {\n            firstColumnIndex = 1\n            columns = columns.slice(1)\n          } else {\n            firstColumnIndex = 0\n          }\n          for (let i = firstColumnIndex; i < size; i++) {\n            columns[i - firstColumnIndex].label = values[i]\n          }\n          lastMeta = createFluxTableMetaData(columns)\n          expectMeta = false\n        } else if (values[0] === '#datatype') {\n          for (let i = 1; i < size; i++) {\n            columns[i].dataType = values[i] as ColumnType\n          }\n        } else if (values[0] === '#default') {\n          for (let i = 1; i < size; i++) {\n            columns[i].defaultValue = values[i]\n          }\n        } else if (values[0] === '#group') {\n          for (let i = 1; i < size; i++) {\n            columns[i].group = values[i][0] === 't'\n          }\n        }\n      } else {\n        yield {\n          values: values.slice(firstColumnIndex, size),\n          tableMeta:\n            lastMeta as unknown as FluxTableMetaData /* never undefined */,\n        }\n      }\n    }\n  }\n}\n","import {CommunicationObserver} from './CommunicationObserver'\n\n/**\n * StringToLines is a transformation that emmits strings for each CSV\n * line in the supplied source string.\n * @param source - source string\n * @param target - target to emmit CSV lines to\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function stringToLines(\n  source: string,\n  target: CommunicationObserver<string>\n): void {\n  let quoted = false\n  let start = 0\n  let index = 0\n\n  while (index < source.length) {\n    const c = source.charCodeAt(index)\n    if (c === 10) {\n      if (!quoted) {\n        /* do not emit CR+LR or LF line ending */\n        const end =\n          index > 0 && source.charCodeAt(index - 1) === 13 ? index - 1 : index\n        // do not emmit more lines if the processing is already finished\n        target.next(source.substring(start, end))\n        start = index + 1\n      }\n    } else if (c === 34 /* \" */) {\n      quoted = !quoted\n    }\n    index++\n  }\n  if (start < index) {\n    target.next(source.substring(start, index))\n  }\n  target.complete()\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"\\@\\@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../results/CommunicationObserver'\nimport {Cancellable} from '../results/Cancellable'\n\n/** APIExecutor executes the API and passes its response to the supplied consumer */\nexport type APIExecutor = (consumer: CommunicationObserver<Uint8Array>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<Uint8Array>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<Uint8Array>, executor: APIExecutor) {\n    try {\n      executor({\n        next: (value) => {\n          observer.next(value)\n        },\n        error: (e) => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: (c) => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: APIExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n\n  // this makes sure we satisfy the interface, while using a possibly polyfilled\n  // [symbolObservable] above for the actual implementation\n  public declare [Symbol.observable]: () => this\n}\n","import {Transport} from './transport'\nimport WriteApi from './WriteApi'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /**\n   * socket timeout, 10000 milliseconds by default in node.js\n   * @defaultValue 10000\n   */\n  timeout?: number\n  /**\n   * TransportOptions supply extra options for the transport layer, they differ between node.js and browser/deno.\n   * Node.js transport accepts options specified in {@link https://nodejs.org/api/http.html#http_http_request_options_callback | http.request } or\n   * {@link https://nodejs.org/api/https.html#https_https_request_options_callback | https.request }. For example, an `agent` property can be set to\n   * {@link https://www.npmjs.com/package/proxy-http-agent | setup HTTP/HTTPS proxy }, {@link  https://nodejs.org/api/tls.html#tls_tls_connect_options_callback | rejectUnauthorized }\n   * property can disable TLS server certificate verification. Additionally,\n   * {@link https://github.com/follow-redirects/follow-redirects | follow-redirects } property can be also specified\n   * in order to follow redirects in node.js.\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch | fetch } is used under the hood in browser/deno.\n   * For example,\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch | redirect } property can be set to 'error' to abort request if a redirect occurs.\n   */\n  transportOptions?: {[key: string]: any}\n  /**\n   * Default HTTP headers to send with every request.\n   */\n  headers?: Record<string, string>\n  /**\n   * Full HTTP web proxy URL including schema, for example http://your-proxy:8080.\n   */\n  proxyUrl?: string\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** add `random(retryJitter)` milliseconds delay when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write (milliseconds) */\n  minRetryDelay: number\n  /** maximum delay when retrying write (milliseconds) */\n  maxRetryDelay: number\n  /** base for the exponential retry delay */\n  exponentialBase: number\n  /**\n   * randomRetry indicates whether the next retry delay is deterministic (false) or random (true).\n   * The deterministic delay starts with `minRetryDelay * exponentialBase` and it is multiplied\n   * by `exponentialBase` until it exceeds `maxRetryDelay`.\n   * When random is `true`, the next delay is computed as a random number between next retry attempt (upper)\n   * and the lower number in the deterministic sequence. `random(retryJitter)` is added to every returned value.\n   */\n  randomRetry: boolean\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /**\n   * WriteFailed is called to inform about write errors.\n   * @param this - the instance of the API that failed\n   * @param error - write error\n   * @param lines - failed lines\n   * @param attempt - count of already failed attempts to write the lines (1 ... maxRetries+1)\n   * @param expires - expiration time for the lines to be retried in millis since epoch\n   * @returns a Promise to force the API to use it as a result of the flush operation,\n   * void/undefined to continue with default retry mechanism\n   */\n  writeFailed(\n    this: WriteApi,\n    error: Error,\n    lines: Array<string>,\n    attempt: number,\n    expires: number\n  ): Promise<void> | void\n\n  /**\n   * WriteSuccess is informed about successfully written lines.\n   * @param this - the instance of the API in use\n   * @param lines - written lines\n   */\n  writeSuccess(this: WriteApi, lines: Array<string>): void\n\n  /**\n   * WriteRetrySkipped is informed about lines that were removed from the retry buffer\n   * to keep the size of the retry buffer under the configured limit (maxBufferLines).\n   * @param entry - lines that were skipped\n   */\n  writeRetrySkipped(entry: {lines: Array<string>; expires: number}): void\n\n  /** max count of retries after the first write fails */\n  maxRetries: number\n  /** max time (millis) that can be spent with retries */\n  maxRetryTime: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by {@link WriteApi} .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records/lines to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n  /** default tags, unescaped */\n  defaultTags?: Record<string, string>\n  /** HTTP headers that will be sent with every write request */\n  headers?: {[key: string]: string}\n  /** When specified, write bodies larger than the threshold are gzipped  */\n  gzipThreshold?: number\n  /** max size of a batch in bytes */\n  maxBatchBytes: number\n  /** InfluxDB Enterprise write consistency as explained in https://docs.influxdata.com/enterprise_influxdb/v1.9/concepts/clustering/#write-consistency */\n  consistency?: 'any' | 'one' | 'quorum' | 'all'\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = {\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 125000,\n  exponentialBase: 5,\n  randomRetry: true,\n}\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = {\n  batchSize: 1000,\n  maxBatchBytes: 50_000_000, // default max batch size in the cloud\n  flushInterval: 60000,\n  writeFailed: function () {},\n  writeSuccess: function () {},\n  writeRetrySkipped: function () {},\n  maxRetries: 5,\n  maxRetryTime: 180_000,\n  maxBufferLines: 32_000,\n  // a copy of DEFAULT_RetryDelayStrategyOptions, so that DEFAULT_WriteOptions could be tree-shaken\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 125000,\n  exponentialBase: 2,\n  gzipThreshold: 1000,\n  randomRetry: true,\n}\n\n/**\n * Options used by {@link InfluxDB} .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Timestamp precision used in write operations.\n * See {@link https://docs.influxdata.com/influxdb/latest/api/#operation/PostWrite }\n */\nexport type WritePrecisionType = 'ns' | 'us' | 'ms' | 's'\n","function createEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  return function (value: string): string {\n    let retVal = ''\n    let from = 0\n    let i = 0\n    while (i < value.length) {\n      const found = characters.indexOf(value[i])\n      if (found >= 0) {\n        retVal += value.substring(from, i)\n        retVal += replacements[found]\n        from = i + 1\n      }\n      i++\n    }\n    if (from == 0) {\n      return value\n    } else if (from < value.length) {\n      retVal += value.substring(from, value.length)\n    }\n    return retVal\n  }\n}\nfunction createQuotedEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  const escaper = createEscaper(characters, replacements)\n  return (value: string): string => '\"' + escaper(value) + '\"'\n}\n\n/**\n * Provides functions escape specific parts in InfluxDB line protocol.\n */\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: createEscaper(', \\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\n', '\\\\r', '\\\\t']),\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: createQuotedEscaper('\"\\\\', ['\\\\\"', '\\\\\\\\']),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: createEscaper(', =\\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\=', '\\\\n', '\\\\r', '\\\\t']),\n}\n","declare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.BUILD_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.BUILD_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.BUILD_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = {\n  s: seconds as () => string,\n  ms: millis as () => string,\n  us: micros as () => string,\n  ns: nanos as () => string,\n  seconds: seconds as () => string,\n  millis: millis as () => string,\n  micros: micros as () => string,\n  nanos: nanos as () => string,\n}\n\n/**\n * dateToProtocolTimestamp provides converters for JavaScript Date to InfluxDB Write Protocol Timestamp. Keys are supported precisions.\n */\nexport const dateToProtocolTimestamp = {\n  s: (d: Date): string => `${Math.floor(d.getTime() / 1000)}`,\n  ms: (d: Date): string => `${d.getTime()}`,\n  us: (d: Date): string => `${d.getTime()}000`,\n  ns: (d: Date): string => `${d.getTime()}000000`,\n}\n\n/**\n * convertTimeToNanos converts Point's timestamp to a string.\n * @param value - supported timestamp value\n * @returns line protocol value\n */\nexport function convertTimeToNanos(\n  value: string | number | Date | undefined\n): string | undefined {\n  if (value === undefined) {\n    return nanos()\n  } else if (typeof value === 'string') {\n    return value.length > 0 ? value : undefined\n  } else if (value instanceof Date) {\n    return `${value.getTime()}000000`\n  } else if (typeof value === 'number') {\n    return String(Math.floor(value))\n  } else {\n    return String(value)\n  }\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = {\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n}\nlet provider: Logger = consoleLogger\n\nexport const Log: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger - logger to use\n * @returns previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n","/** Property that offers a function that returns flux-sanitized value of an object.  */\nexport const FLUX_VALUE = Symbol('FLUX_VALUE')\n\n/**\n * A flux parameter can print its (sanitized) flux value.\n */\nexport interface FluxParameterLike {\n  [FLUX_VALUE](): string\n}\n\n/**\n * Represents a parameterized query.\n */\nexport interface ParameterizedQuery {\n  /**\n   * Returns flux query with sanitized parameters.\n   */\n  toString(): string\n}\n\nclass FluxParameter implements FluxParameterLike, ParameterizedQuery {\n  constructor(private fluxValue: string) {}\n  toString(): string {\n    return this.fluxValue\n  }\n  [FLUX_VALUE](): string {\n    return this.fluxValue\n  }\n}\n\n/**\n * Checks if the supplied object is FluxParameterLike\n * @param value - any value\n * @returns true if it is\n */\nfunction isFluxParameterLike(value: any): boolean {\n  return typeof value === 'object' && typeof value[FLUX_VALUE] === 'function'\n}\n\n/**\n * Escapes content of the supplied string so it can be wrapped into double qoutes\n * to become a [flux string literal](https://docs.influxdata.com/flux/latest/spec/lexical-elements/#string-literals).\n * @param value - string value\n * @returns sanitized string\n */\nfunction sanitizeString(value: any): string {\n  if (value === null || value === undefined) return ''\n  value = value.toString()\n  let retVal: any = undefined\n  let i = 0\n  function prepareRetVal(): void {\n    if (retVal === undefined) {\n      retVal = value.substring(0, i)\n    }\n  }\n  for (; i < value.length; i++) {\n    const c = value.charAt(i)\n    switch (c) {\n      case '\\r':\n        prepareRetVal()\n        retVal += '\\\\r'\n        break\n      case '\\n':\n        prepareRetVal()\n        retVal += '\\\\n'\n        break\n      case '\\t':\n        prepareRetVal()\n        retVal += '\\\\t'\n        break\n      case '\"':\n      case '\\\\':\n        prepareRetVal()\n        retVal = retVal + '\\\\' + c\n        break\n      case '$':\n        // escape ${\n        if (i + 1 < value.length && value.charAt(i + 1) === '{') {\n          prepareRetVal()\n          i++\n          retVal += '\\\\${'\n          break\n        }\n        // append $\n        if (retVal != undefined) {\n          retVal += c\n        }\n        break\n      default:\n        if (retVal != undefined) {\n          retVal += c\n        }\n    }\n  }\n  if (retVal !== undefined) {\n    return retVal\n  }\n  return value\n}\n\n/**\n * Creates a flux string literal.\n */\nexport function fluxString(value: any): FluxParameterLike {\n  return new FluxParameter(`\"${sanitizeString(value)}\"`)\n}\n\n/**\n * Sanitizes float value to avoid injections.\n * @param value - InfluxDB float literal\n * @returns sanitized float value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeFloat(value: any): string {\n  const val = Number(value)\n  if (!isFinite(val)) {\n    if (typeof value === 'number') {\n      return `float(v: \"${val}\")`\n    }\n    throw new Error(`not a flux float: ${value}`)\n  }\n  // try to return a flux float literal if possible\n  // https://docs.influxdata.com/flux/latest/data-types/basic/float/#float-syntax\n  const strVal = val.toString()\n  let hasDot = false\n  for (const c of strVal) {\n    if ((c >= '0' && c <= '9') || c == '-') continue\n    if (c === '.') {\n      hasDot = true\n      continue\n    }\n    return `float(v: \"${strVal}\")`\n  }\n  return hasDot ? strVal : strVal + '.0'\n}\n/**\n * Creates a flux float literal.\n */\nexport function fluxFloat(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeFloat(value))\n}\n\n/**\n * Sanitizes integer value to avoid injections.\n * @param value - InfluxDB integer literal\n * @returns sanitized integer value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeInteger(value: any): string {\n  // https://docs.influxdata.com/flux/latest/data-types/basic/int/\n  // Min value: -9223372036854775808\n  // Max value: 9223372036854775807\n  // \"9223372036854775807\".length === 19\n  const strVal = String(value)\n  const negative = strVal.startsWith('-')\n  const val = negative ? strVal.substring(1) : strVal\n  if (val.length === 0 || val.length > 19) {\n    throw new Error(`not a flux integer: ${strVal}`)\n  }\n  for (const c of val) {\n    if (c < '0' || c > '9') throw new Error(`not a flux integer: ${strVal}`)\n  }\n  if (val.length === 19) {\n    if (negative && val > '9223372036854775808') {\n      throw new Error(`flux integer out of bounds: ${strVal}`)\n    }\n    if (!negative && val > '9223372036854775807') {\n      throw new Error(`flux integer out of bounds: ${strVal}`)\n    }\n  }\n  return strVal\n}\n\n/**\n * Creates a flux integer literal.\n */\nexport function fluxInteger(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeInteger(value))\n}\n\nfunction sanitizeDateTime(value: any): string {\n  return `time(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDateTime(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeDateTime(value))\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDuration(value: any): FluxParameterLike {\n  return new FluxParameter(`duration(v: \"${sanitizeString(value)}\")`)\n}\n\nfunction sanitizeRegExp(value: any): string {\n  if (value instanceof RegExp) {\n    return value.toString()\n  }\n  return new RegExp(value).toString()\n}\n\n/**\n * Creates flux regexp literal out of a regular expression. See\n * https://docs.influxdata.com/flux/latest/data-types/basic/regexp/#regular-expression-syntax\n * for details.\n */\nexport function fluxRegExp(value: any): FluxParameterLike {\n  // let the server decide if a regexp can be parsed\n  return new FluxParameter(sanitizeRegExp(value))\n}\n\n/**\n * Creates flux boolean literal.\n */\nexport function fluxBool(value: any): FluxParameterLike {\n  if (value === 'true' || value === 'false') {\n    return new FluxParameter(value)\n  }\n  return new FluxParameter((!!value).toString())\n}\n\n/**\n * Assumes that the supplied value is flux expression or literal that does not need sanitizing.\n *\n * @param value - any value\n * @returns the supplied value as-is\n */\nexport function fluxExpression(value: any): FluxParameterLike {\n  return new FluxParameter(String(value))\n}\n\n/**\n * Escapes content of the supplied parameter so that it can be safely embedded into flux query.\n * @param value - parameter value\n * @returns sanitized flux value or an empty string if it cannot be converted\n */\nexport function toFluxValue(value: any): string {\n  if (value === undefined) {\n    return ''\n  } else if (value === null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return value.toString()\n  } else if (typeof value === 'string') {\n    return `\"${sanitizeString(value)}\"`\n  } else if (typeof value === 'number') {\n    if (Number.isSafeInteger(value)) {\n      return sanitizeInteger(value)\n    }\n    return sanitizeFloat(value)\n  } else if (typeof value === 'object') {\n    if (typeof value[FLUX_VALUE] === 'function') {\n      return value[FLUX_VALUE]()\n    } else if (value instanceof Date) {\n      return value.toISOString()\n    } else if (value instanceof RegExp) {\n      return sanitizeRegExp(value)\n    } else if (Array.isArray(value)) {\n      return `[${value.map(toFluxValue).join(',')}]`\n    }\n  } else if (typeof value === 'bigint') {\n    return `${value}.0`\n  }\n  // use toString value for unrecognized object, symbol\n  return toFluxValue(value.toString())\n}\n\n/**\n * Flux is a tagged template that sanitizes supplied parameters\n * to avoid injection attacks in flux.\n */\nexport function flux(\n  strings: TemplateStringsArray,\n  ...values: any\n): ParameterizedQuery {\n  if (strings.length == 1 && values.length === 0) {\n    return fluxExpression(strings[0]) // the simplest case\n  }\n  const parts = new Array<string>(strings.length + values.length)\n  let partIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    const text = strings[i]\n    parts[partIndex++] = text\n    if (i < values.length) {\n      const val = values[i]\n      let sanitized: string\n      if (\n        text.endsWith('\"') &&\n        i + 1 < strings.length &&\n        strings[i + 1].startsWith('\"')\n      ) {\n        // parameter is wrapped into flux double quotes\n        sanitized = sanitizeString(val)\n      } else {\n        sanitized = toFluxValue(val)\n        if (sanitized === '') {\n          // do not allow to insert empty strings, unless it is FluxParameterLike\n          if (!isFluxParameterLike(val)) {\n            throw new Error(\n              `Unsupported parameter literal '${val}' at index: ${i}, type: ${typeof val}`\n            )\n          }\n        }\n      }\n      parts[partIndex++] = sanitized\n    } else if (i < strings.length - 1) {\n      throw new Error('Too few parameters supplied!')\n    }\n  }\n  // return flux expression so that flux can be embedded into another flux as-is\n  return fluxExpression(parts.join(''))\n}\n","import {convertTimeToNanos} from './util/currentTime'\nimport {escape} from './util/escape'\n\n/**\n * Settings that control the way of how a {@link Point} is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  /** default tags to add to every point */\n  defaultTags?: {[key: string]: string}\n  /** convertTime serializes Point's timestamp to a line protocol value */\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n\n/**\n * Point defines values of a single measurement.\n */\nexport class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  /** escaped field values */\n  public fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName - the measurement name\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name - measurement name\n   * @returns this\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag. The caller has to ensure that both name and value are not empty\n   * and do not end with backslash.\n   *\n   * @param name - tag name\n   * @param value - tag value\n   * @returns this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field - field name\n   * @param value - field value\n   * @returns this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN or out of int64 range value is supplied\n   */\n  public intField(name: string, value: number | any): Point {\n    let val: number\n    if (typeof value === 'number') {\n      val = value\n    } else {\n      val = parseInt(String(value))\n    }\n    if (isNaN(val) || val <= -9223372036854776e3 || val >= 9223372036854776e3) {\n      throw new Error(`invalid integer value for field '${name}': '${value}'!`)\n    }\n    this.fields[name] = `${Math.floor(val)}i`\n    return this\n  }\n\n  /**\n   * Adds an unsigned integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN out of range value is supplied\n   */\n  public uintField(name: string, value: number | any): Point {\n    if (typeof value === 'number') {\n      if (isNaN(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\n        throw new Error(`uint value for field '${name}' out of range: ${value}`)\n      }\n      this.fields[name] = `${Math.floor(value as number)}u`\n    } else {\n      const strVal = String(value)\n      for (let i = 0; i < strVal.length; i++) {\n        const code = strVal.charCodeAt(i)\n        if (code < 48 || code > 57) {\n          throw new Error(\n            `uint value has an unsupported character at pos ${i}: ${value}`\n          )\n        }\n      }\n      if (\n        strVal.length > 20 ||\n        (strVal.length === 20 &&\n          strVal.localeCompare('18446744073709551615') > 0)\n      ) {\n        throw new Error(\n          `uint value for field '${name}' out of range: ${strVal}`\n        )\n      }\n      this.fields[name] = `${strVal}u`\n    }\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN/Infinity/-Infinity is supplied\n   */\n  public floatField(name: string, value: number | any): Point {\n    let val: number\n    if (typeof value === 'number') {\n      val = value\n    } else {\n      val = parseFloat(value)\n    }\n    if (!isFinite(val)) {\n      throw new Error(`invalid float value for field '${name}': ${value}`)\n    }\n\n    this.fields[name] = String(val)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point timestamp. Timestamp can be specified as a Date (preferred), number, string\n   * or an undefined value. An undefined value instructs to assign a local timestamp using\n   * the client's clock. An empty string can be used to let the server assign\n   * the timestamp. A number value represents time as a count of time units since epoch, the\n   * exact time unit then depends on the {@link InfluxDB.getWriteApi | precision} of the API\n   * that writes the point.\n   *\n   * Beware that the current time in nanoseconds can't precisely fit into a JS number,\n   * which can hold at most 2^53 integer number. Nanosecond precision numbers are thus supplied as\n   * a (base-10) string. An application can also use ES2020 BigInt to represent nanoseconds,\n   * BigInt's `toString()` returns the required high-precision string.\n   *\n   * Note that InfluxDB requires the timestamp to fit into int64 data type.\n   *\n   * @param value - point time\n   * @returns this\n   */\n  public timestamp(value: Date | number | string | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  /**\n   * Creates an InfluxDB protocol line out of this instance.\n   * @param settings - settings control serialization of a point timestamp and can also add default tags,\n   * nanosecond timestamp precision is used when no `settings` or no `settings.convertTime` is supplied.\n   * @returns an InfluxDB protocol line out of this instance\n   */\n  public toLineProtocol(settings?: Partial<PointSettings>): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach((x) => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach((x) => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    } else {\n      time = convertTimeToNanos(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error, failedAttempts?: number): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return delay + Math.round(Math.random() * this.options.retryJitter)\n    } else {\n      if (failedAttempts && failedAttempts > 0) {\n        // compute delay\n        if (this.options.randomRetry) {\n          // random delay between deterministic delays\n          let delay = Math.max(this.options.minRetryDelay, 1)\n          let nextDelay = delay * this.options.exponentialBase\n          for (let i = 1; i < failedAttempts; i++) {\n            delay = nextDelay\n            nextDelay = nextDelay * this.options.exponentialBase\n            if (nextDelay >= this.options.maxRetryDelay) {\n              nextDelay = this.options.maxRetryDelay\n              break\n            }\n          }\n          return (\n            delay +\n            Math.round(\n              Math.random() * (nextDelay - delay) +\n                Math.random() * this.options.retryJitter\n            )\n          )\n        }\n        // deterministric delay otherwise\n        let delay = Math.max(this.options.minRetryDelay, 1)\n        for (let i = 1; i < failedAttempts; i++) {\n          delay = delay * this.options.exponentialBase\n          if (delay >= this.options.maxRetryDelay) {\n            delay = this.options.maxRetryDelay\n            break\n          }\n        }\n        return delay + Math.round(Math.random() * this.options.retryJitter)\n      } else if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * this.options.exponentialBase, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy.\n * @param options - retry options\n * @returns retry strategy implementation\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import {Log} from '../util/logger'\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  retryTime: number\n  expires: number\n  next?: RetryItem\n}\n\ntype FindShrinkCandidateResult = [found: RetryItem, parent?: RetryItem]\n\nfunction findShrinkCandidate(first: RetryItem): FindShrinkCandidateResult {\n  let parent = undefined\n  let found = first\n  let currentParent = first\n  while (currentParent.next) {\n    if (currentParent.next.expires < found.expires) {\n      parent = currentParent\n      found = currentParent.next\n    }\n    currentParent = currentParent.next\n  }\n  return [found, parent]\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  size = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number,\n      started: number\n    ) => Promise<void>,\n    private onShrink: (entry: {\n      lines: string[]\n      retryCount: number\n      expires: number\n    }) => void = () => undefined\n  ) {}\n\n  addLines(\n    lines: string[],\n    retryCount: number,\n    delay: number,\n    expires: number\n  ): void {\n    if (this.closed) return\n    if (!lines.length) return\n    let retryTime = Date.now() + delay\n    if (expires < retryTime) {\n      retryTime = expires\n    }\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        // remove \"oldest\" item\n        const [found, parent] = findShrinkCandidate(this.first)\n        this.size -= found.lines.length\n        if (parent) {\n          parent.next = found.next\n        } else {\n          this.first = found.next\n          if (this.first) {\n            this.scheduleRetry(this.first.retryTime - Date.now())\n          }\n        }\n        found.next = undefined\n        this.onShrink(found)\n      } while (this.first && this.size + lines.length > newSize)\n      Log.error(\n        `RetryBuffer: ${\n          origSize - this.size\n        } oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines.`\n      )\n    }\n    const toAdd: RetryItem = {\n      lines,\n      retryCount,\n      retryTime,\n      expires,\n    }\n    // insert sorted according to retryTime\n    let current: RetryItem | undefined = this.first\n    let parent = undefined\n    for (;;) {\n      if (!current || current.retryTime > retryTime) {\n        toAdd.next = current\n        if (parent) {\n          parent.next = toAdd\n        } else {\n          this.first = toAdd\n          this.scheduleRetry(retryTime - Date.now())\n        }\n        break\n      }\n      parent = current\n      current = current.next\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      toRetry.next = undefined\n      this.size -= toRetry.lines.length\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n    }\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount, toRetry.expires)\n          .catch(() => {\n            /* error is already logged, it must be caught */\n          })\n          .finally(() => {\n            // schedule next retry execution\n            if (this.first) {\n              this.scheduleRetry(this.first.retryTime - Date.now())\n            }\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, Math.max(delay, 0))\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount, toRetry.expires)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","/**\n * Utf8Length returns an expected length of a string when UTF-8 encoded.\n * @param s - input string\n * @returns expected count of bytes\n */\nexport default function utf8Length(s: string): number {\n  let retVal = s.length\n  // extends the size with code points (https://en.wikipedia.org/wiki/UTF-8#Encoding)\n  for (let i = 0; i < s.length; i++) {\n    const code = s.charCodeAt(i)\n    /* istanbul ignore else - JS does not count with 4-bytes UNICODE characters at the moment */\n    if (code < 0x80) {\n      continue\n    } else if (code >= 0x80 && code <= 0x7ff) {\n      retVal++\n    } else if (code >= 0x800 && code <= 0xffff) {\n      if (code >= 0xd800 && code <= 0xdfff) {\n        // node.js represents unicode characters above 0xffff by two UTF-16 surrogate halves\n        // see https://en.wikipedia.org/wiki/UTF-8#Codepage_layout\n        retVal++\n      } else {\n        retVal += 2\n      }\n    } else {\n      // never happens in node.js 14, the situation can vary in the futures or in deno/browsers\n      retVal += 3\n    }\n  }\n  return retVal\n}\n","import WriteApi from '../WriteApi'\nimport {\n  DEFAULT_WriteOptions,\n  WriteOptions,\n  WritePrecisionType,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport {Headers} from '../results'\nimport {Log} from '../util/logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport {Point} from '../Point'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\nimport utf8Length from '../util/utf8Length'\n\nclass WriteBuffer {\n  length = 0\n  bytes = -1\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private maxBatchBytes: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    const size = utf8Length(record)\n    if (this.length === 0) {\n      this.scheduleSend()\n    } else if (this.bytes + size + 1 >= this.maxBatchBytes) {\n      // the new size already exceeds maxBatchBytes, send it\n      this.flush().catch((_e) => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n    this.lines[this.length] = record\n    this.length++\n    this.bytes += size + 1\n    if (\n      this.length >= this.maxChunkRecords ||\n      this.bytes >= this.maxBatchBytes\n    ) {\n      this.flush().catch((_e) => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    this.bytes = -1 // lines are joined with \\n\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi {\n  public path: string\n\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.path = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    if (writeOptions?.consistency) {\n      this.path += `&consistency=${encodeURIComponent(\n        writeOptions.consistency\n      )}`\n    }\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n    if (this.writeOptions.defaultTags) {\n      this.useDefaultTags(this.writeOptions.defaultTags)\n    }\n    this.sendOptions = {\n      method: 'POST',\n      headers: {\n        'content-type': 'text/plain; charset=utf-8',\n        ...writeOptions?.headers,\n      },\n      gzipThreshold: this.writeOptions.gzipThreshold,\n    }\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries\n              ).catch((_e) => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      this.writeOptions.maxBatchBytes,\n      (lines) => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch,\n      this.writeOptions.writeRetrySkipped\n    )\n  }\n\n  sendBatch(\n    lines: string[],\n    retryAttempts: number,\n    expires: number = Date.now() + this.writeOptions.maxRetryTime\n  ): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    const failedAttempts = self.writeOptions.maxRetries + 1 - retryAttempts\n    if (!this.closed && lines.length > 0) {\n      if (expires <= Date.now()) {\n        const error = new Error('Max retry time exceeded.')\n        const onRetry = self.writeOptions.writeFailed.call(\n          self,\n          error,\n          lines,\n          failedAttempts,\n          expires\n        )\n        if (onRetry) {\n          return onRetry\n        }\n        Log.error(\n          `Write to InfluxDB failed (attempt: ${failedAttempts}).`,\n          error\n        )\n        return Promise.reject(error)\n      }\n      return new Promise<void>((resolve, reject) => {\n        let responseStatusCode: number | undefined\n        const callbacks = {\n          responseStarted(_headers: Headers, statusCode?: number): void {\n            responseStatusCode = statusCode\n          },\n          error(error: Error): void {\n            // call the writeFailed listener and check if we can retry\n            const onRetry = self.writeOptions.writeFailed.call(\n              self,\n              error,\n              lines,\n              failedAttempts,\n              expires\n            )\n            if (onRetry) {\n              onRetry.then(resolve, reject)\n              return\n            }\n            // ignore informational message about the state of InfluxDB\n            // enterprise cluster, if present\n            if (\n              error instanceof HttpError &&\n              error.json &&\n              typeof error.json.error === 'string' &&\n              error.json.error.includes('hinted handoff queue not empty')\n            ) {\n              Log.warn('Write to InfluxDB returns: ' + error.json.error)\n              responseStatusCode = 204\n              callbacks.complete()\n              return\n            }\n            // retry if possible\n            if (\n              !self.closed &&\n              retryAttempts > 0 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Log.warn(\n                `Write to InfluxDB failed (attempt: ${failedAttempts}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                retryAttempts - 1,\n                self.retryStrategy.nextDelay(error, failedAttempts),\n                expires\n              )\n              reject(error)\n              return\n            }\n            Log.error(`Write to InfluxDB failed.`, error)\n            reject(error)\n          },\n          complete(): void {\n            // older implementations of transport do not report status code\n            if (responseStatusCode == 204 || responseStatusCode == undefined) {\n              self.writeOptions.writeSuccess.call(self, lines)\n              self.retryStrategy.success()\n              resolve()\n            } else {\n              const message = `204 HTTP response status code expected, but ${responseStatusCode} returned`\n              const error = new HttpError(\n                responseStatusCode,\n                message,\n                undefined,\n                '0'\n              )\n              error.message = message\n              callbacks.error(error)\n            }\n          },\n        }\n        this.transport.send(\n          this.path,\n          lines.join('\\n'),\n          this.sendOptions,\n          callbacks\n        )\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < points.length; i++) {\n      const line = points[i].toLineProtocol(this)\n      if (line) this.writeBuffer.add(line)\n    }\n  }\n  async flush(withRetryBuffer?: boolean): Promise<void> {\n    await this.writeBuffer.flush()\n    if (withRetryBuffer) {\n      return await this.retryBuffer.flush()\n    }\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Log.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): number {\n    this._clearFlushTimeout()\n    this.closed = true\n    return this.retryBuffer.close() + this.writeBuffer.length\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = tags\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      return String(value)\n    }\n  }\n}\n","import {CommunicationObserver, Headers} from '../results'\n\ntype CompleteObserver = Omit<\n  Required<CommunicationObserver<any>>,\n  'useCancellable' | 'useResume'\n> &\n  Pick<CommunicationObserver<any>, 'useResume' | 'useCancellable'>\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): CompleteObserver {\n  let state = 0\n  const retVal: CompleteObserver = {\n    next: (data: any): void | boolean => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        return callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers, statusCode?: number): void => {\n      if (callbacks.responseStarted)\n        callbacks.responseStarted(headers, statusCode)\n    },\n  }\n  if (callbacks.useCancellable) {\n    retVal.useCancellable = callbacks.useCancellable.bind(callbacks)\n  }\n  if (callbacks.useResume) {\n    retVal.useResume = callbacks.useResume.bind(callbacks)\n  }\n  return retVal\n}\n","import {Transport, SendOptions} from '../../transport'\nimport {ConnectionOptions} from '../../options'\nimport {AbortError, HttpError} from '../../errors'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport {Log} from '../../util/logger'\nimport {\n  ChunkCombiner,\n  CommunicationObserver,\n  createTextDecoderCombiner,\n  Headers,\n  ResponseStartedFn,\n} from '../../results'\n\nfunction getResponseHeaders(response: Response): Headers {\n  const headers: Headers = {}\n  response.headers.forEach((value: string, key: string) => {\n    const previous = headers[key]\n    if (previous === undefined) {\n      headers[key] = value\n    } else if (Array.isArray(previous)) {\n      previous.push(value)\n    } else {\n      headers[key] = [previous, value]\n    }\n  })\n  return headers\n}\n\n/**\n * Transport layer that use browser fetch.\n */\nexport default class FetchTransport implements Transport {\n  chunkCombiner: ChunkCombiner = createTextDecoderCombiner()\n  private defaultHeaders: {[key: string]: string}\n  private url: string\n  constructor(private connectionOptions: ConnectionOptions) {\n    this.defaultHeaders = {\n      'content-type': 'application/json; charset=utf-8',\n      // 'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`, // user-agent can hardly be customized https://github.com/influxdata/influxdb-client-js/issues/262\n      ...connectionOptions.headers,\n    }\n    if (this.connectionOptions.token) {\n      this.defaultHeaders['Authorization'] =\n        'Token ' + this.connectionOptions.token\n    }\n    this.url = String(this.connectionOptions.url)\n    if (this.url.endsWith('/')) {\n      this.url = this.url.substring(0, this.url.length - 1)\n    }\n    // https://github.com/influxdata/influxdb-client-js/issues/263\n    // don't allow /api/v2 suffix to avoid future problems\n    if (this.url.endsWith('/api/v2')) {\n      this.url = this.url.substring(0, this.url.length - '/api/v2'.length)\n      Log.warn(\n        `Please remove '/api/v2' context path from InfluxDB base url, using ${this.url} !`\n      )\n    }\n  }\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<Uint8Array>> | undefined\n  ): void {\n    const observer = completeCommunicationObserver(callbacks)\n    let cancelled = false\n    let signal = (options as any).signal\n    let pausePromise: Promise<void> | undefined\n    const resumeQuickly = () => {}\n    let resume = resumeQuickly\n    if (callbacks && callbacks.useCancellable) {\n      const controller = new AbortController()\n      if (!signal) {\n        signal = controller.signal\n        options = {...options, signal}\n      }\n      // resume data reading so that it can exit on abort signal\n      signal.addEventListener('abort', () => {\n        resume()\n      })\n      callbacks.useCancellable({\n        cancel() {\n          cancelled = true\n          controller.abort()\n        },\n        isCancelled() {\n          return cancelled || signal.aborted\n        },\n      })\n    }\n    this.fetch(path, body, options)\n      .then(async (response) => {\n        if (callbacks?.responseStarted) {\n          observer.responseStarted(\n            getResponseHeaders(response),\n            response.status\n          )\n        }\n        await this.throwOnErrorResponse(response)\n        if (response.body) {\n          const reader = response.body.getReader()\n          let chunk: ReadableStreamReadResult<Uint8Array>\n          do {\n            if (pausePromise) {\n              await pausePromise\n            }\n            if (cancelled) {\n              break\n            }\n            chunk = await reader.read()\n            if (observer.next(chunk.value) === false) {\n              const useResume = observer.useResume\n              if (!useResume) {\n                const msg = 'Unable to pause, useResume is not configured!'\n                await reader.cancel(msg)\n                return Promise.reject(new Error(msg))\n              }\n              pausePromise = new Promise((resolve) => {\n                resume = () => {\n                  resolve()\n                  pausePromise = undefined\n                  resume = resumeQuickly\n                }\n                useResume(resume)\n              })\n            }\n          } while (!chunk.done)\n        } else if (response.arrayBuffer) {\n          const buffer = await response.arrayBuffer()\n          observer.next(new Uint8Array(buffer))\n        } else {\n          const text = await response.text()\n          observer.next(new TextEncoder().encode(text))\n        }\n      })\n      .catch((e) => {\n        if (!cancelled) {\n          observer.error(e)\n        }\n      })\n      .finally(() => observer.complete())\n  }\n  private async throwOnErrorResponse(response: Response): Promise<void> {\n    if (response.status >= 300) {\n      let text = ''\n      try {\n        text = await response.text()\n        if (!text) {\n          const headerError = response.headers.get('x-influxdb-error')\n          if (headerError) {\n            text = headerError\n          }\n        }\n      } catch (e) {\n        Log.warn('Unable to receive error body', e)\n        throw new HttpError(\n          response.status,\n          response.statusText,\n          undefined,\n          response.headers.get('retry-after'),\n          response.headers.get('content-type')\n        )\n      }\n      throw new HttpError(\n        response.status,\n        response.statusText,\n        text,\n        response.headers.get('retry-after'),\n        response.headers.get('content-type')\n      )\n    }\n  }\n\n  async *iterate(\n    path: string,\n    body: string,\n    options: SendOptions\n  ): AsyncIterableIterator<Uint8Array> {\n    const response = await this.fetch(path, body, options)\n    await this.throwOnErrorResponse(response)\n    if (response.body) {\n      const reader = response.body.getReader()\n      for (;;) {\n        const {value, done} = await reader.read()\n        if (done) {\n          break\n        }\n        if (options.signal?.aborted) {\n          await response.body.cancel()\n          throw new AbortError()\n        }\n        yield value\n      }\n    } else if (response.arrayBuffer) {\n      const buffer = await response.arrayBuffer()\n      yield new Uint8Array(buffer)\n    } else {\n      const text = await response.text()\n      yield new TextEncoder().encode(text)\n    }\n  }\n\n  async request(\n    path: string,\n    body: any,\n    options: SendOptions,\n    responseStarted?: ResponseStartedFn\n  ): Promise<any> {\n    const response = await this.fetch(path, body, options)\n    const {headers} = response\n    const responseContentType = headers.get('content-type') || ''\n    if (responseStarted) {\n      responseStarted(getResponseHeaders(response), response.status)\n    }\n\n    await this.throwOnErrorResponse(response)\n    const responseType = options.headers?.accept ?? responseContentType\n    if (responseType.includes('json')) {\n      return await response.json()\n    } else if (\n      responseType.includes('text') ||\n      responseType.startsWith('application/csv')\n    ) {\n      return await response.text()\n    }\n  }\n\n  private fetch(\n    path: string,\n    body: any,\n    options: SendOptions\n  ): Promise<Response> {\n    const {method, headers, ...other} = options\n    const url = `${this.url}${path}`\n    const request: RequestInit = {\n      method: method,\n      body:\n        method === 'GET' || method === 'HEAD'\n          ? undefined\n          : typeof body === 'string'\n          ? body\n          : JSON.stringify(body),\n      headers: {\n        ...this.defaultHeaders,\n        ...headers,\n      },\n      credentials: 'omit' as const,\n      // override with custom transport options\n      ...this.connectionOptions.transportOptions,\n      // allow to specify custom options, such as signal, in SendOptions\n      ...other,\n    }\n    this.requestDecorator(request, options, url)\n    return fetch(url, request)\n  }\n\n  /**\n   * RequestDecorator allows to modify requests before sending.\n   *\n   * The following example shows a function that adds gzip\n   * compression of requests using pako.js.\n   *\n   * ```ts\n   * const client = new InfluxDB({url: 'http://a'})\n   * client.transport.requestDecorator = function(request, options) {\n   *   const body = request.body\n   *   if (\n   *     typeof body === 'string' &&\n   *     options.gzipThreshold !== undefined &&\n   *     body.length > options.gzipThreshold\n   *   ) {\n   *     request.headers['content-encoding'] = 'gzip'\n   *     request.body = pako.gzip(body)\n   *   }\n   * }\n   * ```\n   */\n  public requestDecorator: (\n    request: RequestInit,\n    options: SendOptions,\n    url: string\n  ) => void = function () {}\n}\n","import {Observable} from '../observable'\nimport QueryApi, {QueryOptions} from '../QueryApi'\nimport {Transport} from '../transport'\nimport {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n  Row,\n  AnnotatedCSVResponse,\n  IterableResultExecutor,\n} from '../results'\nimport {ParameterizedQuery} from '../query/flux'\nimport {APIExecutor} from '../results/ObservableQuery'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(\n    private transport: Transport,\n    private createCSVResponse: (\n      executor: APIExecutor,\n      iterableResultExecutor: IterableResultExecutor\n    ) => AnnotatedCSVResponse,\n    org: string | QueryOptions\n  ) {\n    this.options = typeof org === 'string' ? {org} : org\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    return new QueryApiImpl(this.transport, this.createCSVResponse, {\n      ...this.options,\n      ...options,\n    })\n  }\n\n  response(query: string | ParameterizedQuery): AnnotatedCSVResponse {\n    const {org, type, gzip, headers} = this.options\n    const path = `/api/v2/query?org=${encodeURIComponent(org)}`\n    const body = JSON.stringify(\n      this.decorateRequest({\n        query: query.toString(),\n        dialect: DEFAULT_dialect,\n        type,\n      })\n    )\n    const options = {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json; encoding=utf-8',\n        'accept-encoding': gzip ? 'gzip' : 'identity',\n        ...headers,\n      },\n    }\n    return this.createCSVResponse(\n      (consumer) => this.transport.send(path, body, options, consumer),\n      () => this.transport.iterate(path, body, options)\n    )\n  }\n\n  iterateLines(query: string | ParameterizedQuery): AsyncIterable<string> {\n    return this.response(query).iterateLines()\n  }\n  iterateRows(query: string | ParameterizedQuery): AsyncIterable<Row> {\n    return this.response(query).iterateRows()\n  }\n  lines(query: string | ParameterizedQuery): Observable<string> {\n    return this.response(query).lines()\n  }\n\n  rows(query: string | ParameterizedQuery): Observable<Row> {\n    return this.response(query).rows()\n  }\n\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void {\n    return this.response(query).consumeLines(consumer)\n  }\n\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void {\n    return this.response(query).consumeRows(consumer)\n  }\n\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper?: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    return this.response(query).collectRows(rowMapper)\n  }\n\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>> {\n    return this.response(query).collectLines()\n  }\n\n  queryRaw(query: string | ParameterizedQuery): Promise<string> {\n    const {org, type, gzip, headers} = this.options\n    return this.transport.request(\n      `/api/v2/query?org=${encodeURIComponent(org)}`,\n      JSON.stringify(\n        this.decorateRequest({\n          query: query.toString(),\n          dialect: DEFAULT_dialect,\n          type,\n        })\n      ),\n      {\n        method: 'POST',\n        headers: {\n          accept: 'text/csv',\n          'accept-encoding': gzip ? 'gzip' : 'identity',\n          'content-type': 'application/json; encoding=utf-8',\n          ...headers,\n        },\n      }\n    )\n  }\n\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://docs.influxdata.com/influxdb/latest/api/#operation/PostQuery requires type\n    request.type = this.options.type ?? 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n  Row,\n  linesToTables,\n  ChunkCombiner,\n  chunksToLines,\n  chunksToLinesIterable,\n  linesToRowsIterable,\n} from '../results'\nimport {Observable} from '../observable'\nimport {\n  AnnotatedCSVResponse,\n  IterableResultExecutor,\n} from './AnnotatedCSVResponse'\nimport ObservableQuery, {APIExecutor} from './ObservableQuery'\n\nexport function defaultRowMapping(\n  values: string[],\n  tableMeta: FluxTableMetaData\n): Record<string, any> {\n  return tableMeta.toObject(values)\n}\n\n/**\n * AnnotatedCsvResponseImpl is an implementation AnnotatedCsvResponse\n * that uses the supplied executor to supply a response data stream.\n */\nexport class AnnotatedCSVResponseImpl implements AnnotatedCSVResponse {\n  constructor(\n    private executor: APIExecutor,\n    private iterableResultExecutor: IterableResultExecutor,\n    private chunkCombiner: ChunkCombiner\n  ) {}\n  iterateLines(): AsyncIterable<string> {\n    return chunksToLinesIterable(this.iterableResultExecutor())\n  }\n  iterateRows(): AsyncIterable<Row> {\n    return linesToRowsIterable(\n      chunksToLinesIterable(this.iterableResultExecutor())\n    )\n  }\n  lines(): Observable<string> {\n    return new ObservableQuery(this.executor, (observer) =>\n      chunksToLines(observer, this.chunkCombiner)\n    )\n  }\n\n  rows(): Observable<Row> {\n    return new ObservableQuery(this.executor, (observer) => {\n      return chunksToLines(\n        linesToTables({\n          next(values, tableMeta) {\n            observer.next({values, tableMeta})\n          },\n          error(e) {\n            observer.error(e)\n          },\n          complete() {\n            observer.complete()\n          },\n        }),\n        this.chunkCombiner\n      )\n    })\n  }\n\n  consumeLines(consumer: CommunicationObserver<string>): void {\n    this.executor(chunksToLines(consumer, this.chunkCombiner))\n  }\n\n  consumeRows(consumer: FluxResultObserver<string[]>): void {\n    this.executor(chunksToLines(linesToTables(consumer), this.chunkCombiner))\n  }\n\n  collectRows<T>(\n    rowMapper: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined = defaultRowMapping as (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    const retVal: Array<T> = []\n    return new Promise((resolve, reject) => {\n      this.consumeRows({\n        next(values: string[], tableMeta: FluxTableMetaData): void {\n          const toAdd = rowMapper.call(this, values, tableMeta)\n          if (toAdd !== undefined) {\n            retVal.push(toAdd)\n          }\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  collectLines(): Promise<Array<string>> {\n    const retVal: Array<string> = []\n    return new Promise((resolve, reject) => {\n      this.consumeLines({\n        next(line: string): void {\n          retVal.push(line)\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n}\n","import WriteApi from './WriteApi'\nimport {ClientOptions, WriteOptions, WritePrecisionType} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/browser/FetchTransport'\nimport QueryApi, {QueryOptions} from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\nimport {\n  AnnotatedCSVResponse,\n  APIExecutor,\n  IterableResultExecutor,\n} from './results'\nimport {AnnotatedCSVResponseImpl} from './results/AnnotatedCSVResponseImpl'\n\n/**\n * InfluxDB entry point that configures communication with InfluxDB server\n * and provide APIs to write and query data.\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n  readonly processCSVResponse: (\n    executor: APIExecutor,\n    iterableResultExecutor: IterableResultExecutor\n  ) => AnnotatedCSVResponse\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options - client options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport ?? new TransportImpl(this._options)\n    this.processCSVResponse = (\n      executor: APIExecutor,\n      iterableResultExecutor: IterableResultExecutor\n    ): AnnotatedCSVResponse =>\n      new AnnotatedCSVResponseImpl(\n        executor,\n        iterableResultExecutor,\n        this.transport.chunkCombiner\n      )\n  }\n\n  /**\n   * Creates WriteApi for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @remarks\n   * Use {@link WriteOptions} to customize retry strategy options, data chunking\n   * and flushing options. See {@link DEFAULT_WriteOptions} to see the defaults.\n   *\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/write.mjs | write example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/writeAdvanced.mjs | writeAdvanced example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example}.\n   *\n   * @param org - Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket - The destination bucket for writes.\n   * @param precision - Timestamp precision for line items.\n   * @param writeOptions - Custom write options.\n   * @returns WriteApi instance\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType = 'ns',\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions ?? this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates QueryApi for the supplied organization .\n   *\n   * @remarks\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/query.ts | query.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/queryWithParams.mjs | queryWithParams.mjs example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/rxjs-query.ts | rxjs-query.ts example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example},\n   *\n   * @param org - organization or query options\n   * @returns QueryApi instance\n   */\n  getQueryApi(org: string | QueryOptions): QueryApi {\n    return new QueryApiImpl(this.transport, this.processCSVResponse, org)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}