{"ast":null,"code":"var _jsxFileName = \"/home/lcl_asingh/Projects/Myprojects/line-chart-app/src/Components/ReChartInfluxDB.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { InfluxDB } from \"@influxdata/influxdb-client\";\nimport { ComposedChart, Bar, Line, XAxis, YAxis, Tooltip, Legend, CartesianGrid, Area } from \"recharts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst token = \"xuaip5AwEnDMv_4Utz0uQDVwoduZMT0EjP_YZdfE9AJr7Yi5o19r2Pkgpj4vdtpg5LAeTx14Wy2Skb_c05aZEw==\";\nconst org = \"org\";\nconst url = \"http://localhost:8086\";\nlet query = `from(bucket: \"air-sensor\")\n  |> range(start: -30m)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"airSensors\")\n  |> filter(fn: (r) => r[\"_field\"] == \"humidity\" or r[\"_field\"] == \"temperature\" )\n  |> filter(fn: (r) => r[\"sensor_id\"] == \"TLM0102\")\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> yield(name: \"results\")\n`;\nexport const InfuxChart = () => {\n  _s();\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    let res = [];\n    const influxQuery = async () => {\n      //create InfluxDB client\n      const queryApi = await new InfluxDB({\n        url,\n        token\n      }).getQueryApi(org);\n      //make query\n      await queryApi.queryRows(query, {\n        next(row, tableMeta) {\n          const o = tableMeta.toObject(row);\n          //push rows from query into an array object\n          res.push(o);\n        },\n        complete() {\n          let finalData = [];\n          for (let i = 0; i < res.length; i++) {\n            let point = {};\n            point[\"humidity\"] = res[i][\"humidity\"];\n            point[\"temperature\"] = res[i][\"temperature\"];\n            point[\"name\"] = res[i][\"_time\"];\n            finalData.push(point);\n          }\n          setData(finalData);\n        },\n        error(error) {\n          console.log(\"query failed- \", error);\n        }\n      });\n    };\n    influxQuery();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Influx Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ComposedChart, {\n      width: 900,\n      height: 400,\n      data: data,\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        stroke: \"#0ff770\",\n        strokeWidth: 1,\n        dataKey: \"temperature\",\n        dot: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        stroke: \"#bf04b3\",\n        fill: \"#f235e6\",\n        dataKey: \"humidity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        hide: true,\n        dataKey: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(InfuxChart, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = InfuxChart;\nexport default InfuxChart;\nvar _c;\n$RefreshReg$(_c, \"InfuxChart\");","map":{"version":3,"names":["React","useState","useEffect","InfluxDB","ComposedChart","Bar","Line","XAxis","YAxis","Tooltip","Legend","CartesianGrid","Area","jsxDEV","_jsxDEV","token","org","url","query","InfuxChart","_s","data","setData","res","influxQuery","queryApi","getQueryApi","queryRows","next","row","tableMeta","o","toObject","push","complete","finalData","i","length","point","error","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","stroke","strokeWidth","dataKey","dot","fill","hide","_c","$RefreshReg$"],"sources":["/home/lcl_asingh/Projects/Myprojects/line-chart-app/src/Components/ReChartInfluxDB.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { InfluxDB } from \"@influxdata/influxdb-client\";\nimport {\n  ComposedChart,\n  Bar,\n  Line,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  CartesianGrid,\n  Area\n} from \"recharts\";\n\nconst token = \"xuaip5AwEnDMv_4Utz0uQDVwoduZMT0EjP_YZdfE9AJr7Yi5o19r2Pkgpj4vdtpg5LAeTx14Wy2Skb_c05aZEw==\";\nconst org = \"org\";\nconst url = \"http://localhost:8086\";\n\nlet query = `from(bucket: \"air-sensor\")\n  |> range(start: -30m)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"airSensors\")\n  |> filter(fn: (r) => r[\"_field\"] == \"humidity\" or r[\"_field\"] == \"temperature\" )\n  |> filter(fn: (r) => r[\"sensor_id\"] == \"TLM0102\")\n  |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> yield(name: \"results\")\n`;\n\nexport const InfuxChart = () => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    let res = [];\n    const influxQuery = async () => {\n      //create InfluxDB client\n      const queryApi = await new InfluxDB({ url, token }).getQueryApi(org);\n      //make query\n      await queryApi.queryRows(query, {\n        next(row, tableMeta) {\n          const o = tableMeta.toObject(row);\n          //push rows from query into an array object\n          res.push(o);\n        },\n        complete() {\n          let finalData = []\n\n          for (let i = 0; i < res.length; i++) {\n            let point = {};\n            point[\"humidity\"] = res[i][\"humidity\"];\n            point[\"temperature\"] = res[i][\"temperature\"];\n\n            point[\"name\"] = res[i][\"_time\"];\n            finalData.push(point);\n          }\n          setData(finalData);\n        },\n        error(error) {\n          console.log(\"query failed- \", error);\n        }\n      });\n    };\n\n    influxQuery();\n  }, []);\n  return (\n    <div>\n      <h1>Influx Chart</h1>\n      <ComposedChart width={900} height={400} data={data}>\n        <CartesianGrid />\n        <Tooltip />\n        <Line\n          stroke=\"#0ff770\"\n          strokeWidth={1}\n          dataKey=\"temperature\"\n          dot={false}\n        />\n        <Area stroke=\"#bf04b3\" fill=\"#f235e6\" dataKey=\"humidity\" />\n        <XAxis hide dataKey=\"name\" />\n        <YAxis />\n      </ComposedChart>\n    </div>\n  );\n};\n\nexport default InfuxChart;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}